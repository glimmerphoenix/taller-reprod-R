# Taller: colección de apuntes

En este capítulo, vamos a poner en práctica los conocimientos adquiridos para crear
un documento de apuntes de clase, que también puede servir como cuaderno de
laboratorio, cuaderno de prácticas o bitácora de experimentos.

Para ello, vamos combinar lo que ya sabemos acerca de los documentos y libros en
Quarto junto con nuevas opciones de configuración y plantillas que abrirán nuevas
e interesantes posibilidades de diseño. Por supuesto, con los conocimientos
adicionales adecuados (no necesariamente muy avanzados), muchos usuarios serán
capaces de adaptar y personalizar el diseño gráfico y la maquetación de sus documentos
en PDF o LaTeX para ajustarlos a sus necesidades.

## Opciones de diseño del documento

Además de las numerosas opciones que hemos explorado para ajustar el comportamiento de muchos
elementos de nuestros documentos, Quarto todavía nos reserva muchas más alternativas para
controlar el diseño de la página y la distribución de su contenido de forma que:

- Ocupe toda la región principal (centro del documento).
- Sobrepase los límites de la región principal.
- Cubra todo el ancho de la pantalla (por ejemplo, cuando queremos representar
mapas o figuras muy anchas, compuestas por varias gráficas en una misma fila).
- Se sitúe en los márgenes del documento.

- [Guía para personalizar el diseño del documento (HTML)](https://quarto.org/docs/authoring/article-layout.html).
- [Opciones de configuración del diseño del documento (PDF)](https://quarto.org/docs/authoring/article-layout.html#pdflatex-layout).

En este taller nos centramos en la generación de salida en HTML. Por defecto, en
un documento HTML producido con Quarto tenemos un [diseño estándar](https://quarto.org/docs/output-formats/page-layout.html#html-page-layout) 
del espacio de la página en tres columnas:

- La columna central, *body* más ancha, para el contenido principal de la página.
- La columna izquierda, *sidebar* (barra lateral), que se suele emplear en los libros
para la tabla de contenidos desplegable que permite navegar por la colección de documentos.
- La columna derecha, *margin*, que se suele utilizar para mostrar la tabla de contenidos
del documento o capítulo que aparece en el body en ese momento, junto con otros enlaces
a contenido adicional (e.g. enlace al código fuente, a la web de la organización o editorial, etc.).

Por supuesto, las dimensiones de estas tres columnas son 
[totalmente personalizables](https://quarto.org/docs/output-formats/page-layout.html#customizing-component-widths).

### Contenido principal

Si no especificamos ninguna variación en la configuración, el documento de Quarto muestra los
elementos ocupando todo el ancho de la columna central (*document body*).

Si queremos que el contenido sobrepase un poco los límites de ese espacio central, pero sin llegar
a ocupar todo el ancho de la pantalla, podemos usar una nueva sección *div* HTML con un estilo
específico:

```markdown
:::{.column-body-outset}
Outset content...
:::
```

Para ampliar aún mas el ancho de presentación, pero dejando cierto margen de espacio respecto a ambos bordes
de la pantalla se puede usar en su lugar el estilo `{.column-page}`. Por último, si realmente queremos
ocupar todo el ancho de la pantalla (sin dejar margen a ambos lados) se puede usar el estilo `{.column-screen}`.
Estas opciones de diseño también son aplicables a la configuración de los bloques de código ejecutable.
Veamos un ejemplo:


```{r}
#| echo: fenced
#| column: page

knitr::kable(
  mtcars[1:6, 1:10]
)
```

Por último, las opciones de estilo `{.column-screen-inset}` o `{.column-screen-inset-shaded}` dan una apariencia
de ocupar el ancho de la pantalla al completo pero dejando un ligero margen en los bordes (con sombreado, en el segundo
caso).

### Contenido en los márgenes

El estilo `{.column-margin}` permite ubicar en la columna derecha de la página cualquier elemento, ya sea un texto,
una figura o gráfica, una tabla, ecuación, etc.

```markdown
::: {.column-margin}
![A margin image](image.png)
:::
```

Veamos un ejemplo aplicado a una ecuación que se muestra al margen:

::: {.column-margin}
We know from *the first fundamental theorem of calculus* that for $x$ in $[a, b]$:

$$\frac{d}{dx}\left( \int_{a}^{x} f(u)\,du\right)=f(x).$$
:::

Ahora con una figura al margen:

```{r}
#| echo: fenced
#| label: fig-mtcars
#| fig-cap: "MPG vs horsepower, colored by transmission."
#| column: margin

library(ggplot2)
mtcars2 <- mtcars
mtcars2$am <- factor(
  mtcars$am, labels = c('automatic', 'manual')
)
ggplot(mtcars2, aes(hp, mpg, color = am)) +
  geom_point() +
  geom_smooth(formula = y ~ x, method = "loess") +
  theme(legend.position = 'bottom')
```

Por último, probamos con una tabla ubicada en el margen:

```{r}
#| echo: fenced
#| column: margin

knitr::kable(
  mtcars[1:6, 1:3]
)
```

También es posible especificar opciones individualizadas para cada
elemento cuando un bloque de código [genera varios resultados](https://quarto.org/docs/authoring/article-layout.html#multiple-outputs).

Se recomienda consultar la [guía completa de diseño de los artículos] de Quarto para explorar más opciones adicionales
de configuración.

### Notas al margen y citas bibliográficas

Si se añaden las siguientes opciones en la cabecera del documento (o de la salida HTML del proyecto global),
se modifica la ubicación de las notas al pie y las citas bibliográficas, que pasan a mostrarse en el margen derecho
del documento, a la misma altura de la llamada o cita en el texto principal, siguiendo los principios de diseño
de los documentos de Tufte:

```markdown
reference-location: margin
citation-location: margin
```

Adicionalmente, también podemos poner notas puntuales (no numeradas) en el margen del documento con el estilo
de párrafo `{.aside}`:

```
[This is a span that has the class `aside` which places 
it in the margin without a footnote number.]{.aside}
```
[This is a span that has the class `aside` which places it in the margin without a footnote number.]{.aside}

## Anotaciones en bloques de código

Una característica muy útil para la creación de documentació y tutoriales es la de anotar las líneas dentro de
los bloques de código ejecutable. Veamos un ejemplo:

```` markdown
```r
#| label: demo-code-annotation
#| message: false
#| output: false
library(tidyverse)
library(palmerpenguins)
penguins |>                                      # <1>
  mutate(                                        # <2>
    bill_ratio = bill_depth_mm / bill_length_mm, # <2>
    bill_area  = bill_depth_mm * bill_length_mm  # <2>
  )                                              # <2>
```
1. Take `penguins`, and then,
2. add new columns for the bill ratio and bill area.
````

Que produce el siguiente resultado:

```{r}
#| label: demo-code-annotation
#| message: false
#| output: false
library(tidyverse)
library(palmerpenguins)
penguins |>                                      # <1>
  mutate(                                        # <2>
    bill_ratio = bill_depth_mm / bill_length_mm, # <2>
    bill_area  = bill_depth_mm * bill_length_mm  # <2>
  )                                              # <2>
```
1. Take `penguins`, and then,
2. add new columns for the bill ratio and bill area.

Se pueden utilizar más opciones de configuración para
controlar cómo se muestran las anotaciones de código
(al hacer click sobre la anotación, al pasar el ratón
por encima o la opción por defecto que hemos visto).

- [Guía para anotación de líneas en bloques de código](https://quarto.org/docs/authoring/code-annotation.html)


## Configuración del proyecto

### Opciones globales

- [Guía de referencia de opciones globales del diseño gráfico del documento (HTML)](https://quarto.org/docs/authoring/article-layout.html#options-reference).
- [Guía de referencia de opciones globales del diseño gráfico del documento (PDF)](https://quarto.org/docs/authoring/article-layout.html#pdflatex-layout).

### Idioma de los documentos

Una opción de configuración muy interesante para nuestros documentos y proyectos es la
de especificar el idioma de los mismos. Por defecto, los documentos de Quarto se generan
en inglés. Si embargo, varias herramientas, incluyendo paquetes LaTeX para localización
del contenido y división de palabraas, así como Pandoc y el propio Quarto pueden traducir
muchas etiquetas automáticamente ("Figura", "Tabla", "Ecuación", etc.) al idioma adecuado.

Para ello, tenemos que proporcionar 
[un nuevo valor para la opción `lang`](https://quarto.org/docs/authoring/language.html#lang-option) 
en la cabecera de nuestro documento o en el archivo de configuración `_quarto.yml` de nuestro proyecto:

```yaml
---
title: "Mi documento en castellano"
lang: es    
---
```

También es posible ofrecer traducciones personalizadas para etiquetas y campos estándar del documento
o proyecto, de forma que se ajuste perfectamente a nuestras directrices de estilo o las de nuestra
organización. Para más detalles, consulta la siguiente guía:

- [Configuración de idioma en documentos Quarto](https://quarto.org/docs/authoring/language.html).

En particular, si vamos a proporcionar una larga lista de traducciones alternativas conviene codificarlas
en un fichero independiente y pasarlo a las opciones de configuración del documento o proyecto:

```yaml
language: custom_translations.yml
```

Podemos llegar incluso al extremo de tener traducciones personalizadas para diferentes idiomas, que se usan
en función del valor que pasemos a la opción de selección de idioma `lang`.

Respecto al **soporte multilenguaje simultáneo** (el mismo documento en varios idiomas), dicha característica
todavía no está soportada en Quarto. Sin embargo, un paquete de reciente creación en la comunidad
ROpenSci llamado [`babledown`](https://docs.ropensci.org/babeldown/articles/quarto.html) (aún en fase
expermental), permite gestionar estas versiones multidioma de forma simultánea (mostrando en un idioma enlaces
al resto de idiomas disponibles). Más aún, el objetivo principal de este paquete es ofrecer una interfaz
para el servicio de traducción automática DeepL, de forma que se traduzcan automáticamente los textos de
nuestros documentos a otros idiomas.

### Enlaces a otros formatos

Cuando generamos un documento Quarto en múltiples formatos, de manera automática se debería generar en la parte
superior derecha (o en algún punto de la columna a la derecha de la página) un enlace a las otras versiones disponibles
de dicho documento. La figura [@fig-other-format-PDF] muestra un ejemplo del enlace que aparece en la página:

![Enlace a otra versión en PDF del documento creado con Quarto](img/link-other-format-PDF.png){#fig-other-format-PDF width=40%}

Para que esto suceda, tenemos que declarar que se genere la salida del docoumento en varios formatos:

```yaml
title: Sample Page
author: Norah Jones
date: last-modified
toc: true
format: 
  html: default
  pdf: default
  ipynb: default
```

Las opciones anteriores generarían dos enlaces en la página HTML (el formato por defecto): uno para descargar la versión
alternativa en PDF y otro para descargar la versión en formato *notebook* de Jupyter.

Se puede consultar la siguiente página de la guía de Quarto para descubrir más opciones de configuración, incluyendo
cómo personalizar los textos de los enlaces o los formatos que se muestran para descarga:

- [Guía para incluir enlaces a otros formatos del documento](https://quarto.org/docs/output-formats/html-multi-format.html)

Es importante saber que los proyectos de tipo `book` funcionan de una manera un tanto diferente, por ser un tipo
de proyecto especial. En este caso, el enlace de descarga para versiones en otros formatos se pone junto al título
del libro (en la parte superior izquierda) y se activa con la siguiente opción:

```yaml
book:
  downloads: [pdf]
```


## Plantillas y herramientas

Ahora, vamos a practicar con un ejemplo en el que se combinan varios aspectos que hemos estado tratando en este
capítulo

- [Galería de ejemplo de plantillas de documentos en Quarto](https://github.com/quarto-dev/quarto-gallery/tree/main).
- [Documento de ejemplo con los estilos gráficos de Tufte *handouts*](https://github.com/quarto-dev/quarto-gallery/blob/main/page-layout/tufte.qmd).
  - [Ejemplo de documento HTML con diseño gráfico Tufte *handouts*](https://quarto-dev.github.io/quarto-gallery/page-layout/tufte.html).


## Personalización de los libros

- <https://quarto.org/docs/books/book-output.html>

- Importación y uso de plantillas y extensiones.

## Publicación

- Ejemplo de publicación con GitHub pages.

- <https://quarto.org/docs/publishing/>
- <https://quarto.org/docs/publishing/github-pages.html>



