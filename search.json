[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Investigación reproducible con Quarto y R",
    "section": "",
    "text": "Prefacio\nEste taller explica cómo utilizar Quarto, un software de creación de documentación científica, para crear publicaciones de calidad que integren contenido de texto formateado, gráficos, tablas, así como resultados de ejecución de código software en varios lenguajes, todo ello integrado en el propio documento.\nQuarto se ha convertido en una herramienta muy versátil y potente en el conjunto de herramientas de los programadores científicos, en especial por proporcionar soporte para implementar buenas prácticas de investigación reproducible, incluyendo los principios FAIR. El intenso movimiento iniciado desde hace años por la comunidad científica para garantizar acceso en abierto no solo al producto final (e.g. una publicación) sino también a materiales adicionales (códig fuente, conjuntos de datos, figuras, procesos de trabajo, archivos de configuración, etc.) se ha convertido en un objetivo insoslayable para académicos y especialistas en muchos campos diferentes. Muchas publicaciones científicas de prestigio exigen ahora a los autores enviar estos materiales auxiliares junto con los borradores de sus manuscritos, para permitir que otros colegas reproduzcan y validen los resultados, repliquen sus estudios sobre nuevas cohortes de individuos o elementos o para contribuir a la interpretación de los resultados obtenidos.\nCon la herramienta Quarto se puede combinar texto formateado (escrito en Markdown) junto con secciones de código ejecutable, todo integrado en un mismo documento. Estas secciones o chunks de código ejecutable pueden estar escritas en varios lenguajes: R, Python, Julia u Observable. Es incluso posible combinar en un mismo documento o colección de documentos secciones de código escritas en diferentes lenguajes de programación.\nEste es un taller práctico que presenta ejemplos reales y comandos para crear paso a paso tus propios documentos con Quarto en poco tiempo. Además, junto a la explicación de los conceptos clave para entender este proceso también se ofrecen recomendaciones sobre buenas prácticas de trabajo, para guiar a los aprendices de Quarto en la dirección correcta.\nPuedes aprender muchos más detalles sobre cuarto en la guía en línea https://quarto.org/docs/guide/. En particular, en https://quarto.org/docs/books se documenta en detalle cómo crear libros como este utilizando Quarto.",
    "crumbs": [
      "Prefacio"
    ]
  },
  {
    "objectID": "index.html#requisitos-previos",
    "href": "index.html#requisitos-previos",
    "title": "Investigación reproducible con Quarto y R",
    "section": "Requisitos previos",
    "text": "Requisitos previos\nPara poder realizar los ejemplos inlcuids en este taller necesitas tener instalado R y una IDE de desarrollo para este lenguaje. Se recomienda instalar RStudio o MS Visual Code como entorno de programación.\n\nInstalación de R.\nInstalación de RStudio.\n\nAdicionalmente, es necesario instalar una serie de paquetes R antes de ejecutar los ejemplos, para que todas las dependencias estén disponibles en nuestro sistema. Consulta el Apéndice C.1 Requisitos previos para comprobar el listado de paquetes R necesarios.",
    "crumbs": [
      "Prefacio"
    ]
  },
  {
    "objectID": "01-quarto.html",
    "href": "01-quarto.html",
    "title": "1  Documentos científicos",
    "section": "",
    "text": "1.1 Programación literaria\nEl concepto de programación literaria fue acuñado por el profesor Donald E. Knuth (1984). Sí, no has leído mal, hace más de 40 años. Este concepto establece que debería ser posible integrar, en un solo documento científico, texto formateado y resultados de la ejecución de código software para componer dicho documento de forma dinámica. Entonces, ¿por qué hemos tardado tanto en poner en práctica esta idea? La visión de Knuth, aunque muy adelantada a su tiempo, era correcta, pero la tecnología de la época no permitía ponerla en práctica.\nSin embargo, hoy día contamos con todos los elementos indispensables para llevar esta idea a la práctica. Es más, contamos con una herramienta, Quarto, que nos va a permitir automatizar y gestionar todo el proceso de creación de documentos de programación literaria de forma rápida y fiable.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Documentos científicos</span>"
    ]
  },
  {
    "objectID": "01-quarto.html#investigación-reproducible",
    "href": "01-quarto.html#investigación-reproducible",
    "title": "1  Documentos científicos",
    "section": "1.2 Investigación reproducible",
    "text": "1.2 Investigación reproducible\nDurante muchas décadas, el método científico se ha basado en la publicación de investigaciones que describen el resultado de análisis de datos y experimentos. En todos los casos, resulta fundamental poder confiar en las condiciones, los datos recabados, el método de análisis y de ejecución de los experimentos así como en las herramientas de diversas clase, incluído el software, que los autores de la publicación han empleado para llevarla a cabo.\nSin embargo, los numerosos avances experimentados en los últimos años en las herramientas y métodos de análisis permiten que ahora sea mucho más sencillo comprobar el resultado de estos análisis. Podríamos suponer que esto facilita mucho el trabajo de científicos y científicas, pero en realidad sucede todo lo contrario. Veamos algunos ejemplos:\n\nOncología (Begley & Ellis, 2012): El Departamento de Biotecnología de la firma Amgen (Thousand Oaks, CA, EE.UU.) sólo pudo confirmar 6 de un total de 53 artículos de investigación emblemáticos publicados en este área. Por su parte, Bayer HealthCare (Alemania) tan sólo pudo validar un 25% de los estudios analizados.\nPsicología (Wicherts et al., 2006): El 73% de los autores de un total de 249 artículos publicados por la APA no respondieron en un periodo de 6 meses a las preguntas y requerimientos formulados acerca de los datos que emplearon en sus investigaciones.\nEconomía y finanzas (Burman et al., 2010): La comparación de diferentes paquetes software aplicados en la ejecución de varios análisis de modelos financieros y estadísticos refleja que cada uno de dichos paquetes produce resultados muy distintos empleando las mismas técnicas estadísticas directamente aplicadas sobre datos idénticos a los empleados en la publicación original.\n\nDe hecho, han llegado a aparecer artículos que sugieren que buena parte de los resultados publicados en áreas como Medicina podrían no ser del todo fiables (Ioannidis, 2005). Como resultado de todos estos hallazgos recientes, se ha generado en toda la comunidad científica e investigadora una gran polémica, acompañada de una profunda crisis de confianza.\nA pesar de todo, como muy bien recoge una conocida tira cómica sobre el mundo académico y la investigación (ver Figura 1.2), el proceso de desarrollo de las publicaciones científicas se basa primordialmente en la revisión continua de los métodos y resultados (empezando por los propios estudiantes y sus supervisores).\n\n\n\n\n\n\nFigura 1.2: Tira cómica que representa el modelo de revisión de publicaciones científicas. Fuente: PhD comics.\n\n\n\nLa Figura 1.3 muestra un gráfico publicado en la prestigiosa revista Science Magazine (Brainard et al., 2018), que representa los datos sobre evolución del número de artículos de investigación retractados o retirados por diveresas causas, entre 1997 y 2014. En este gráfico, podemos constatar cómo la mejora de las herramientas y la mayor disponibilidad de recursos permite analizar y revisar un mayor volumen de publicaciones y análisis, lo que permite detectar un mayor número de casos problemáticos.\n\n\n\n\n\n\nFigura 1.3: Evolución del número de publicaciones científicas retractadas o retiradas por diversas causas, entre 1997 y 2014. Fuente: Science Magazine (Brainard et al., 2018).\n\n\n\n\n1.2.1 Reproducibilidad y replicabilidad\nSe habla con frecuencia de reproducir y replicar un análisis de datos o un experimento científico (Leek & Peng, 2015). Sin embargo, se pueden citar numerosas evidencias que demuestran que existen definiciones incompatibles sobre estos dos términos y otros relacionados con ellos (Barba, 2018). Mucho cuidado, por tanto, porque dependiendo de la comunidad científica o el campo de conocimineto en que nos encontremos, el significado de estos dos terminos puede llegar a ser incluso enteramente opuesto a su definición aceptada en otras áreas 1. Aquí vamos a ceñirnos a la definición aceptada en un gran número de áreas, incluyendo estadística o computación científica (véase Barba, 2018, p. 33):\n\nReproducibilidad: Se define como la capacidad para recomputar los resultados de un análisis, con los mismos datos que se emplearon en el análisis original, y conociendo los detalles de la secuencia (workflow o pipeline) de operaciones de componen dicho análisis. Se debe poder garantizar ciertas premisas:\n\nSi usamos las mismas herramientas (e.g. R, un cierto listado de paquetes, las mismas versiones de todos los paquetes y dependencias), así como el mismo código (scripts de R) sobre los mismos datos, los resultados y conclusiones han de ser consistentes con los del análisis original.\nLos autores del análisis original deben proporcionar todos los elementos (datos, código y procedimiento empleado) para permitir que el análisis sea reproducible (Barba, 2018).\n\nReplicabilidad: Se define como la capacidad para realizar un experimento o análisis independiente del original, que aborde el mismo objetivo pero sobre un conjunto de datos diferente del empleado en el estudio inicial. En caso de que los resultados no sean consistentes, será necesario realizar más réplicas y armonizar los resultados y conclusiones por medio de técnicas adecuadas, como por ejemplo el meta-análisis.\n\n\n\n1.2.2 Niveles de replicación\nEn función de los elementos publicados por los autores del estudio original, así como del grado de detalle con el que se describe el proceso para llevar a cabo el estudio, los pasos que se han seguido y las herramientas empleadas, tenemos diferentes niveles de replicabilidad o reproducibilidad, representados en la Figura 1.4.\n\nNo reproducible: No se proporcionan datos, código ni ninguna descripción concreta sobre la implementación del estudio o análisis. Muchas publicaciones científicas ya no aceptan publicar artículos en estas condiciones.\nCódigo o Datos: Un buen número de editoriales solicitan que los conjuntos de datos empleados en el análisis o estudio de la publicación sean accesibles mediante una URL, bien porque estén disponibles en un repositorio público o bien porque los autores del artículo lo han publicado. Así mismo, muchas publicaciones exigen que el código software para llevar a cabo el análisis también esté accesible públicamente, en un repositorio de código abierto o bien en un proyecto de un servicio de control de versiones con acceso libre.\nCódigo y datos: Lo ideal es que tanto el código como los datos estén públicamente accesibles a disposición de quien los quiera examinar o bien utilizar para reproducir los resultados (validación) o replicar el análisis con otros datos u otros casos.\nEntorno de ejecución y datos enlazados: Un paso más para facilitar la reproducibilidad de los estudios consiste en publicar archivos de código y metadatos con información más precisa sobre el lenguaje de programación, los paquetes software empleados y cualquier otra dependencia necesaria para llevar a cabo el mímo estudio o análisis. Otra variante para facilitar la reproducibilidad es la de encapsular el código y las dependencias en un contenedor virtual ya preconfigurado, que se pueda descargar y ejecutar directamente.\nGold standard: El nivel más avanzado consistiría en documentar todos los procedimientos realizados durante el estudio o análisis, incluyendo la codificación de las tareas de obtención, limpieza y preparación de los datos, así como la generación de gráficas de visualización de resultados o cualquier otro resultado derivado del estudio.\n\n\n\n\n\n\n\nFigura 1.4: Espectro de los diferentes niveles de replicación en publicaciones científicas. Fuente: Peng (2011).\n\n\n\n\n\n1.2.3 Herramientas para la replicabilidad\nCiertas tecnologías y herramientas que se han refinado y sofisticado durante los últimos años están permitiendo facilitar la replicabilidad del procesamiento y análisis de datos.\n\nSistemas de Control de Versiones para código software (SCV): herramientas como Git, Mercurial y servicios web como GitHub o GitLab han popularizado la creación y publicación de proyectos que permiten gestionar el código software que se ha creado, controlando los cambios y las versiones liberadas. Los servicios web integran, además, un buen número de herramientas para dar soporte a diferentes facetas del proceso de desarrollo de software, tales como generación de documentación, manuales y ejemplos, informes de error y peticiones de mejoras, integración continua y despliegue continuo (CI/CD), testeo sistemático del código generado, etc. Si todavía no te has planteado en qué puede beneficiarte utilizar una herramienta de control de versiones de código fuente, echa un vistazo a la Figura 1.5 en la que revivirás una situación lamentablemente muy habitual entre los investigadores y científicos que desarrollan soluciones software.\n\n\n\n\n\n\n\nFigura 1.5: Control de versiones de software. Fuente: PhD Comics\n\n\n\n\nVirtualización de software y contenedores: en un entorno tecnológico dominado por la contratación y despliegue de infraestructura de computación y servicios en arquitecturas en la nube (cloud computing), las herramientas de empaquetado y virtualización de aplicaciones y servicios software que pueden instalarse y desplegarse en poco tiempo han revolucionado la forma en la que se publican y gestionan los productos software, incluidos los de procesamiento y análisis de datos.\nControl de versiones de datos: De forma análoga a los SCV para código fuente, está apareciendo software para aplicar los mismos principios a los ficheros de datos. De esta forma, podemos controlar diferentes versiones de cada archivo de datos, modificaciones efectuadas en los mismos, etc. Una de estas herramientas es Data Version Control (DVC), que permite versionado de datos y modelos. Como resultado, podemos saber en todo momento qué versión de los datos y qué listado de features se han incluido en cada modelo considerado durante el análisis, manteniendo integrada la información descriptiva sobre estos tres componentes esenciales que siempre deben ir cohesionados.\n\n\n\n\n\n\n\nFigura 1.6: Ejemplo del versionado de datos, código y modelos que DVC es capaz de mantener. Fuente: Documentación DVC.\n\n\n\n\nGestión de modelos y experimentos: Otro tipo de herramienta de gestión de proyectos de aprendizaje automático es la que permite la organización, seguimiento, comparativa y selección de los experimentos y modelos que hemos realizado. Uno de los ejemplos destacados más recientes es ML Flow, que proporciona soporte para ajuste, evaluación y optimización de modelos, despliegue de los mismos en entornos en producción, creación de un registro de modelos pre-entrenados, etc. Por supuesto, es posible combinar este tipo de herramientas con otras como DVC, creando como resultado un entorno integral de gestión de nuestros proyectos.\nCreación y gestión de pipelines de procesamiento de datos: el último elemento indispensable en todo proyecto de procesamiento y análisis de datos que deba cuidar la escalabilidad es una herramienta para creación y gestión de flujos de procesamiento y análisis o pipelines de datos. El conjunto de todos los pipelines de nuestro proyecto componen el workflow general del mismo. A estas herramientas se las conoce como orquestadores de datos o de flujos de trabajo. En esta categoría, contamos tanto con herramientas muy potentes y llenas de características como Apache Airflow o Prefect como con otras más sencillas y directas como Luigi.\n\nPor supuesto, la comunidad de R no se ha mantenido ajena a estas nuevas tendencias, muy en particular la iniciativa R OpenSci, dentro de la cual encontramos muchos paquetes (publicados en el repositorio oficial CRAN) que cubren diversos aspectos del trabajo científico, incluyendo la gestión de pipelines y workflows mediante el paquete targets.\n\nManual de uso del paquete R targets.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Documentos científicos</span>"
    ]
  },
  {
    "objectID": "01-quarto.html#quarto-para-publicaciones-científicas",
    "href": "01-quarto.html#quarto-para-publicaciones-científicas",
    "title": "1  Documentos científicos",
    "section": "1.3 Quarto para publicaciones científicas",
    "text": "1.3 Quarto para publicaciones científicas\nAhora que ya conocemos el concepto fundamental sobre el que se asienta el funcionamiento de Quarto y su aplicación para conseguir un mayor nivel de reproducibilidad y transparencia en nuestro proceso científico, vamos a explicar con más detalle el proceso que sigue Quarto para componer un documento. La Figura 1.7 presenta un esquema con el proceso de creación del documento y los elementos y herramientas que entran en juego para conseguirlo.\n\n\n\n\n\n\nFigura 1.7: Proceso de creación de contenidos con Quarto.\n\n\n\n\nQuarto: un software que permite crear documentación científica siguiendo los principios de la programación literaria.\nKnitr y lenguaje de programación: el paquete knitr se encarga de la conexión con un intérprete de un lenguaje de programación (R, Python, Julia) que se pueda ejecutar en un entorno REPL, para poder ejecutar fragmentos de código software integrados en el documento y generar como resultado contenido en formato Markdown.\nMarkdown (contenido formateado): lenguaje de marcado de contenido textual que permite formatear de forma sencilla la información de nuestros documentos creados con Quarto.\nPandoc (traductor universal de formatos documentales): este software recibe el contenido ya formateado usando el estándar Markdown, para convertirlo en el tipo de salida seleccionado. Existen varias opciones disponibles: HTML, PDF o Word, así como diapositivas, websites o paneles interactivos (dashboards).",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Documentos científicos</span>"
    ]
  },
  {
    "objectID": "01-quarto.html#sec-quarto-install",
    "href": "01-quarto.html#sec-quarto-install",
    "title": "1  Documentos científicos",
    "section": "1.4 Instalación de Quarto",
    "text": "1.4 Instalación de Quarto\nPara instalar la última versión del software Quarto en nuestro sistema, dirigimos nuestro navegador web a la página https://quarto.org/docs/get-started/. Aquí, descargamos e instalamos el archivo correspondiente a nuestro sistema operativo.\nEn este momento, la última versión de Quarto disponible es la 1.5.57.\n\n\n\n\n\n\nRequisitos para generar documentos en PDF\n\n\n\nPor defecto, el formato de salida de los documentos generados con Quarto es HTML. Si queremos generar documentos en PDF, necesitamos tener instalada una distribución LaTeX. Para más información, consulta la Sección 3.3.\n\n\n\n\n\n\nBarba, L. A. (2018). Terminologies for reproducible research. arXiv preprint arXiv:1802.03311.\n\n\nBegley, C., & Ellis, L. (2012). Drug development: Raise standards for preclinical cancer research. Nature.[Online]. 483 (7391).\n\n\nBrainard, J., You, J., et al. (2018). What a massive database of retracted papers reveals about science publishing’s «death penalty». Science, 25(1), 1-5.\n\n\nBurman, L. E., Reed, W. R., & Alm, J. (2010). A call for replication studies. Public Finance Review, 38(6), 787-793.\n\n\nIoannidis, J. P. (2005). Why most published research findings are false. PLoS Medicine, 2(8), e124.\n\n\nKnuth, D. E. (1984). Literate Programming. Comput. J., 27(2), 97-111. https://doi.org/10.1093/comjnl/27.2.97\n\n\nLeek, J. T., & Peng, R. D. (2015). Reproducible research can still be wrong: Adopting a prevention approach. Proceedings of the National Academy of Sciences, 112(6), 1645-1646.\n\n\nPeng, R. D. (2011). Reproducible research in computational science. Science, 334(6060), 1226-1227.\n\n\nWicherts, J. M., Borsboom, D., Kats, J., & Molenaar, D. (2006). The poor availability of psychological research data for reanalysis. American PAsychologist, 61(7), 726.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Documentos científicos</span>"
    ]
  },
  {
    "objectID": "01-quarto.html#footnotes",
    "href": "01-quarto.html#footnotes",
    "title": "1  Documentos científicos",
    "section": "",
    "text": "Entre los ejemplos más importanes de definiciones que contradicen las que damos en este taller, están las adoptadas por la Federation of American Societies for Experimental Biology (FASEB), en inmunología y microbiología, así como las adoptadas por la Association for Computer Machinery (ACM) en ciencias de la computación.↩︎",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Documentos científicos</span>"
    ]
  },
  {
    "objectID": "02-doctypes.html",
    "href": "02-doctypes.html",
    "title": "2  Tipos de documentos",
    "section": "",
    "text": "2.1 Documentos individuales\nLa forma más sencilla de trabajar con Quarto es crear un documento individual. Dicho documento podrá utilizar las secciones o chunks de código para leer datos de entrada o descargarlos de alguna fuente, procesarlos, analizarlos y mostrar los resultados. Se pueden añadir gráficos, tablas, ecuaciones, referencias bibliográficas y muchos otros elementos.\nLos documentos tienen siempre una estructura estándar:",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Tipos de documentos</span>"
    ]
  },
  {
    "objectID": "02-doctypes.html#documentos-individuales",
    "href": "02-doctypes.html#documentos-individuales",
    "title": "2  Tipos de documentos",
    "section": "",
    "text": "Preámbulo: en el que se especifican opciones de configuración para la creación del documento con Quarto y sus herramientas asociadas.\nCuerpo: la sección que alberga el contenido principal del documento, incluyendo secciones de texto formateado en Markdown y secciones de código ejecutable. El código software se podrá mostrar, si resulta de utilidad, o quedar oculto en el resultado final.\nReferencias: Al final del documento se incluyen las referencias bibliográficas, como es habitual en los textos científicos.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Tipos de documentos</span>"
    ]
  },
  {
    "objectID": "02-doctypes.html#libros",
    "href": "02-doctypes.html#libros",
    "title": "2  Tipos de documentos",
    "section": "2.2 Libros",
    "text": "2.2 Libros\nLa evolución natural del caso anterior es reunir una colección de documentos individuales en un solo libro. Quarto books permite crear este tipo de documentos, estructurados en partes, capítulos y secciones. Las opciones de configuración permitirán confeccionar una portada de introducción para el sito web que contiene los capítulos (un documento por capítulo) o bien los elementos necesarios para crear un libro en PDF, semejante a los publicados por una editorial.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Tipos de documentos</span>"
    ]
  },
  {
    "objectID": "02-doctypes.html#artículos-y-publicaciones",
    "href": "02-doctypes.html#artículos-y-publicaciones",
    "title": "2  Tipos de documentos",
    "section": "2.3 Artículos y publicaciones",
    "text": "2.3 Artículos y publicaciones\nUno de los resultados clave en todo proceso científico es la producción de artículos y publicaciones (informes técnicos, etc.) que recojan los resultados y avances científicos conseguidos. En este caso, Quarto también nos podrá ayudar, con la colaboración de otros elementos indispensables como el paquete R rticles, que proporciona plantillas para generar artículos según las especificaciones de las principales publicaciones y editoriales científicas en multitud de campos de conocimiento.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Tipos de documentos</span>"
    ]
  },
  {
    "objectID": "02-doctypes.html#presentaciones",
    "href": "02-doctypes.html#presentaciones",
    "title": "2  Tipos de documentos",
    "section": "2.4 Presentaciones",
    "text": "2.4 Presentaciones\nTambién es posible generar presentaciones (normalmente, en formato HTML) con diapositivas mediante Quarto. En este caso, tendríamos el soporte de varios paquetes y entornos de creación de presentaciones web a nuestra disposición, como reveal.js (HTML), Beamer (para LaTeX/PDF) o formato PPTX de MS Office.\nEste caso no lo trataremos en este taller, pero se puede obtener más información en la guía online, disponible en https://quarto.org/docs/presentations/.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Tipos de documentos</span>"
    ]
  },
  {
    "objectID": "02-doctypes.html#sitios-web",
    "href": "02-doctypes.html#sitios-web",
    "title": "2  Tipos de documentos",
    "section": "2.5 Sitios web",
    "text": "2.5 Sitios web\nOtra opción que puede resultar interesante es crear sitios web personales (por ejemplo, para mostrar nuestro CV y una selección de trabajos destacados, publicaciones, etc.), blogs e incluso sitios web corporativos (organización, grupo de investigación) de forma rápida mediante Quarto. Existen numerosas plantillas gratuitas y de pago ya disponibles para crear sitios web con un aspecto armonizado, aunque necesitaremos aprender un poco de HTML y CSS para poder personalizar aún más nuestra web.\nAquí tenemos un ejemplo de sitio web de un investigador en tecnología medioambiental creado con Quarto: https://www.mm218.dev/. Más ejemplos de diferentes tipos de sitios web generados con Quarto: https://drganghe.github.io/quarto-academic-site-examples.html.\nSe puede conseguir más información y tutoriales para crear sitios web con Quarto en https://quarto.org/docs/websites/.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Tipos de documentos</span>"
    ]
  },
  {
    "objectID": "02-doctypes.html#dashboards",
    "href": "02-doctypes.html#dashboards",
    "title": "2  Tipos de documentos",
    "section": "2.6 Dashboards",
    "text": "2.6 Dashboards\nPor último, es posible crear cuadros de mandos o dashboards personalizados para monitorización de datos, análisis de modelos y resultados o bien para ejemplos y aplicaciones docentes utilizando Quarto, tal y como se describen en la guía https://quarto.org/docs/dashboards/.\nEn este caso podemos incluir entre las herramientas Shiny, un paquete software para R (también disponible para Python) con el que crear aplicaciones interactivas basadas en datos de forma rápida y sencilla.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Tipos de documentos</span>"
    ]
  },
  {
    "objectID": "03-workflow.html",
    "href": "03-workflow.html",
    "title": "3  Proceso de trabajo",
    "section": "",
    "text": "3.1 Cadena de montaje de un documento\nPodemos considerar el proceso de creación de un documento en Quarto como una cadena de montaje en la que varias herramientas software se aplican secuencialmente para producir el documento final en diferentes formatos de salida.\nPor último, cabe destacar que se necesitan programas de visualización de documentos para cargar los documentos de salida, según el formato: navegador web (HTML), MS Word (archivos DOC/DOCX), visor PDF (archivos PDF).",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Proceso de trabajo</span>"
    ]
  },
  {
    "objectID": "03-workflow.html#cadena-de-montaje-de-un-documento",
    "href": "03-workflow.html#cadena-de-montaje-de-un-documento",
    "title": "3  Proceso de trabajo",
    "section": "",
    "text": "Quarto: El primer agente que interviene en la interpretación del fichero con extensión .qmd es Quarto. El programa debe estar instalado previamente en nuestro equipo para que el entorno de desarrollo que decidamos emplear (RStudio, Microsoft VS Code, etc.) pueda encontrarlo. Quarto se encarga de interpretar el contenido del archivo y considerar las diferentes opciones de configuració que hemos insertado en la cabecera del documento, así como en los fragmentos de código ejecutable, para delegar las tareas de construcción de las distintas partes del documento a otras herramientas.\nQuarto también se encarga de insertar de forma automática algunos elementos de autoría de documentos (como las llamadas de atención, explicadas en la Sección 4.5.4), mientras que la generación de otros elementos (numeración de figuras, tablas, citas bibliográficas, etc.) se delega a otras herramientas como Pandoc.\nMotor de ejecución de código (engine): Una de las grandes ventajas de la producción de documentos en Quarto es la posibilidad de insertar fragmentos de código ejecutable en nuestros documentos. Quarto puede trabajar con diferentes motores (engines en la terminología de Quarto) que interpretan el código y devuelven el resultado de su ejecución para integrarlo en el documento final.\n\nTodos los bloques de código en lenguaje R utilizan el paquete knitr como engine de ejecución.\nLos bloques de código ejecutable en otros lenguajes soportados en Quarto (Python, Julia, Observable) utilizan los kernel disponibles en la herramienta Jupyter para su ejecución, excepto en el caso explícito de que se combinen bloques de código en R y Python en el mismo documento.\nEn el caso particular de que un mismo documento combine bloques de código en R y Python, entonces se utiliza la herramienta Knitr para el código en R junto con el paquete reticulate de R para ejecutar los bloques escritos en Python. Esta combinación tiene la ventaja adicional de que es posible “trasvasar” variables y resultados entre los entornos de ejecución de R y Python, de forma que podamos usar variables y estructuras de datos creados en la parte de R dentro de nuestro código Python y viceversa.\n\nMarkdown: El producto intermedio de todas las fases anteriores es un archivo en formato Markdown (extensión .md), que ya integra el contenido textual formateado y muchos de los resultados y elementos adicionales generados por las distintas herramientas que han entrado en juego hasta este punto. En caso de que fuese útil, este archivo intermedio se puede almacenar para ser revisado o para utilizarlo para otros fines. A continuación, este archivo se envía a Pandoc para la última etapa de creación del documento.\nPandoc: El proyecto Pandoc ofrece una herramienta sofwtware para traducir documentos entre diferentes formatos de representación de información. Como se puede ver rápidamente en la página principal del proyecto, la lista de formatos soportados es realmente extensa. A efectos prácticos, en Quarto se utiliza la capacidad de Pandoc para recibir como entrada un documento en formato Markdown y generar una salida en tres posibles formatos: HTML, DOC/DOCX o PDF. El archivo Markdown debe incluir una sintaxis específica para codificar determinados elementos (referencias cruzadas, citas bibliográficas, figuras, tablas, ecuaciones, etc.) que iremos presentando en los siguientes capítulos, para que Pandoc pueda interpretar estos elementos y representarlos de forma apropiada en cada formato de salida.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Proceso de trabajo</span>"
    ]
  },
  {
    "objectID": "03-workflow.html#producir-html",
    "href": "03-workflow.html#producir-html",
    "title": "3  Proceso de trabajo",
    "section": "3.2 Producir HTML",
    "text": "3.2 Producir HTML\nLa opción por defecto para el formato de salida de los documentos Quarto es generar un documento HTML, que se puede visualizar con la mayoría de navegadores web modernos. Este formato de salida tiene varias ventajas:\n\nEs bastante probable que el receptor del documento ya disponga de uno o varios navegadores instalados en su sistema para ver el documento, si se lo enviamos o compartimos directamente.\nEs más sencillo publicar este tipo de documentos en la Web, utilizando alguna de las distintas plataformas disponibles para este fin:\n\nQuarto Pub, un servicio de publicación de documentos que permite que sean accesibles públicamente.\nLos documentos individuales (véase Capítulo 4) y los libros o colecciones de documentos (véase Capítulo 5) se pueden publicar de forma sencilla y rápida en sitios de hospedaje de proyectos software como GitHub o GitLab, que además proporcionan servicios de control de versiones, gestión de informes de error/mejoras, documentación, testing, etc.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Proceso de trabajo</span>"
    ]
  },
  {
    "objectID": "03-workflow.html#sec-pdf-reqs",
    "href": "03-workflow.html#sec-pdf-reqs",
    "title": "3  Proceso de trabajo",
    "section": "3.3 Producir PDF",
    "text": "3.3 Producir PDF\nAl contrario que en HTML, cuando generamos documentos en PDF se añade un paso adicional de compilación del documento a final de toda la cadena de montaje, utilizando LaTeX y el motor de compilación XeLaTeX para generar la salida PDF. Por tanto, si seleccionamos esta opción de salida es imprescidible tener instalada una distribución TeX/LaTeX previamente en nuestro sistema, para compilar y generar los documentos. Si no disponemos de ninguna todavía, se puede instalar TinyTeX, una distribución ligera de TeX Live que tiene mucho menor tamaño (~100 MB frente a los más de 4 GB de TeX Live completa).\n\n3.3.1 Personalizar documentos PDF\nSe pueden utilizar plantillas de documentos LaTeX predefinidas. Por defecto, Quarto utiliza varias plantillas de la colección de paquetes LaTeX koma-script.\nAlgunas de estas plantillas pueden funcionar de forma relativamente sencilla en Quarto, mientras que otras requieren cierta adaptación, para lo cual se necesitarán algunos conocimientos sobre LaTeX. Este es probablemente un tema más avanzado para muchos usuarios, por lo que por ahora no lo vamos a tratar en este taller introductorio.\nNo obstante, a modo de ejemplo, ofrecemos a continuación un listado de algunos ejemplos que ilustran las enormes posibilidades de este tipo de plantillas:\n\nEl profesor R.J. Hyndman ha publicado plantillas de documentos Quarto de la Monash University, que pueden utilizarse como punto de partida para personalizarlas en nuestros propios proyectos.\nEl repositorio Awesome Quarto Thesis recoge un listado de plantillas Quarto para generar memorias de TFG/TFM y tesis doctorales para algunas universidades. También se enlaza una plantilla genérica de extensión para Quarto, concebida para facilitar que otros usuarios puedan personalizarla según los criterios marcados por su propia institución para generar estos trabajos.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Proceso de trabajo</span>"
    ]
  },
  {
    "objectID": "04-singledoc.html",
    "href": "04-singledoc.html",
    "title": "4  Documentos individuales",
    "section": "",
    "text": "4.1 Creación del documento con RStudio\nAntes de empezar, comprueba que has instalado el software Quarto en tu máquina. Es un programa software independiente, que tiene que estar instalado para que el resto del proceso funcione (consulta la sección Sección 1.4).\nSi ya tenemos instalada una versión reciente de RStudio, necesitaremos instalar los siguientes paquetes para el ejemplo:\ninstall.packages(\"tidyverse\")\ninstall.packages(\"palmerpenguins\")\ninstall.packages(\"quarto\")\nAhora, en RStudio creamos un nuevo proyecto eligiendo la opción Quarto project, tal y como aparece en la Figura 4.1.\nPodemos nombrar el directorio de nuestro proyecto como primer-ejemplo y pulsamos Create Project.\nComo resultado, nos debe aparecer un nuevo proyecto abierto en pantalla, con el aspecto que se muestra en la Figura 4.2.\nEn concreto, en el panel superior izquierdo podemos comprobar que, por defecto se ha abierto el editor Visual, que permite crear documentos Quarto de forma más intuitiva. Sin embargo, para empezar a familiarizarnos desde el principio con la estructura de un documento en quarto vamos a cambiar al editor Source para ver el código fuente, pulsando en el botón que se muestra en la figura Figura 4.3.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Documentos individuales</span>"
    ]
  },
  {
    "objectID": "04-singledoc.html#creación-del-documento-con-rstudio",
    "href": "04-singledoc.html#creación-del-documento-con-rstudio",
    "title": "4  Documentos individuales",
    "section": "",
    "text": "Figura 4.1: New Quarto project\n\n\n\n\n\n\n\n\n\n\n\nFigura 4.2: First example\n\n\n\n\n\n\n\n\n\n\nFigura 4.3: Source editor",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Documentos individuales</span>"
    ]
  },
  {
    "objectID": "04-singledoc.html#estructura-del-documento",
    "href": "04-singledoc.html#estructura-del-documento",
    "title": "4  Documentos individuales",
    "section": "4.2 Estructura del documento",
    "text": "4.2 Estructura del documento\nLa estructura de un documento individual en Quarto es esta.\n---\ntitle: \"Mi primer documento\"\nauthor: John Doe\ndate: 2024-10-24\n---\n\nAquí tenemos algo de contenido en formato **Markdown**.\n\n```{r}\n#| label: Etiqueta\n\n1 + 1\n```\n\nContenido *adicional* en Markdown.\nEl contenido del archivo consta de dos partes:\n\nPreámbulo: está delimitado por dos marcas ---. Dentro de esta área podemos asignar valores a opciones de configuración para maquetar y crear el documento, tales como el título, autor/es, fecha, etc. También podemos configurar diversas opciones relacionadas con el formato de salida de los documentos.\nCuerpo del documento: se compone de párrafos de texto formateados utilizando la sintaxis de marcado Markdown, que veremos después. Además, también se pueden intercalar en el texto fragmentos de código ejecutable o chunks, que se marcan siguiendo una sintaxis especial (como vemos en el ejemplo anterior).\n\nCada chunk de código ejecutable está delimitado de la siguiente manera\n```{r}\n# Código en R\n```\n\n\n\n\n\n\nSoporte para otros lenguajes de programación\n\n\n\nAunque en este taller nos centramos en el lenguaje R, debemos sabes que Quarto también soporta otros lenguajes de programación como Python, Julia u Observable.\nPodemos cambiar el lenguaje de programación de cada chunk indicando su nombre al comienzo, como por ejemplo:\n```{pyton}\n# Código en Python\n```\nSin embargo, para que pueda funcionar necesitaremos realizar algunas tareas adicionales de configuración.\n\n\n\n4.2.1 El preámbulo\nUn ejemplo básico de preámbulo es el siguiente (aunque bastaría con proporcionar únicamente un título para el documento):\n---\ntitle: \"Mi primer documento\"\nauthor: John Doe\ndate: 2024-10-24\n---\nPor supuesto, se pueden ir añadiendo muchas más opciones que iremos explicando a lo largo de este capítulo.\n\n\n4.2.2 Listado de opciones\nExiste un extenso listado de opciones de configuración que podemos incluir en nuestros documentos.\n\nOpciones para salida HTML: permiten configurar diversos aspectos básicos del documento, tales como el título y subtítulo, fecha, autor (o lista de autores), resumen o DOI; opciones de formato como el tema o estilos avanzados para contenido HTML con CSS; numeración y tabla de contenidos, etc.\n\nOpciones básicas para HTML con Quarto.\nLista completa de opciones HTML con Quarto.\n\nOpciones para salida PDF: ofrecen la posibilidad de configurar múltiples parámetros para la creación del documento en este formato, muchas de ellas similares a las de la salida en HTML. Una opción particularmente relevante es elegir el formato de documento LaTeX (opción documentclass), que define el aspecto general de la maquetación que se va a emplear. Por defecto, se emplean clases del metapaquete KOMA Script, como scrartcl o scrbook. También es importante indicar la opción papersize, en nuestro caso para garantizar que se usa un formato estándar como el A4. El formato de las citas también es relevante, pudiendo elegir, por ejemplo, el motor BibLaTeX que es más potente, con soporte multilenguaje y para codificación de caracteres UTF-8 nativa. Por último, también es importante indicar el motor de compilación. Si queremos una flexibilidad total en la maquetación del documento, se recomienda encarecidamente usar el motor XeLaTeX (opción pdf-engine: xelatex), que es el valor por defecto que utiliza Quarto.\n\nOpciones básicas para PDF con Quarto.\nLista completa de opciones disponibles en PDF con Quarto.\n\n\n\n\n4.2.3 Sintaxis Markdown básica\nEn el siguiente enlace puedes encontrar un rápido tutorial básico que muestra las opciones básicas de la sintaxis Markdown aceptada en documentos Quarto para formatear el contenido textual.\n\nGuía básica de sintaxis markdown.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Documentos individuales</span>"
    ]
  },
  {
    "objectID": "04-singledoc.html#creación-del-documento-output",
    "href": "04-singledoc.html#creación-del-documento-output",
    "title": "4  Documentos individuales",
    "section": "4.3 Creación del documento (output)",
    "text": "4.3 Creación del documento (output)\nPor defecto, si no indicamos nada Quarto generará un solo formato de salida del documento en HTML. Sin embargo, es posible definir más de un formato de salida incluyendo más opciones de configuración. Por supuesto, se pueden indicar diferentes opciones para generar varios formatos de salida simultáneamente, o bien para elegir el formato de salida que queremos producir en función de nuestros intereses, seleccionando el formato que necesitamos al previsualizar o al generar el documento definitivo.\n\n4.3.1 Previsualización\nPara previsualizar el documento tenemos que pulsar el botón Render en el menú de herramientas de la interfaz de RStudio, tal y como se muestra en la Figura 4.4.\n\n\n\n\n\n\nFigura 4.4: Botón Render para previsualizar el documento generado.\n\n\n\nPor defecto, lo normal es que se abra nuestro navegador web principal o un panel en la interfaz de RStudio mostrando la página HTML con el documento ya generado. Pulsando sobre el icono con un engranaje junto al botón Render se puede seleccionar, entre otros aspectos, el tipo de previsualización que queremos que se lance tras completar la creación del documento o desactivar por completo dicha previsualización. La opciones disponibles se muestran en la Figura 4.5\n\n\n\n\n\n\nFigura 4.5: Opciones de previsualización de la operación Render.\n\n\n\n\n\n4.3.2 Seleccionar el tipo de documento\nCuando tenemos varias opciones de formato de salida configuradas en nuestro documento, podemos elegir en tiempo de previsualización cuál de los formatos se elige para generar el documento. En la Figura 4.6 se puede observar un ejemplo de documento que incluye configuración para dos formatos de salida (HTML y PDF) y el cambio en el botón Render, en el que ahora aparece una pequeña flecha negra justo a la derecha del icono del botón para desplegar las dos opciones de salida disponibles.\n\n\n\n\n\n\nFigura 4.6: Selección de formatos de salida con la operación Render.\n\n\n\n\n\n4.3.3 Opciones básicas de configuración\nA continuación, se presenta un ejemplo de algunas opciones básicas de configuración que suelen ser habituales en documentos con formato de salida HTML.\n---\ntitle: \"Mi primer documento\"\nauthor: \n  - \"John Doe\"\n  - \"Mary Jane\"\ndate: 2024-10-24\n\nlang: es\nbibliography: references.bib\n\nformat:\n  html:\n    theme: cosmo\n    toc: true\n    number-sections: true\n    html-math-method: katex\n    css: styles.css\n  pdf:\n    documentclass: scrreprt\n---\n\nRESTO DEL DOCUMENTO\nEn este ejemplo se indica, además del autor y la fecha, una lista de dos autores, el lenguaje principal del documento (español), el archivo de referencias de bibliografía (en formato .bib) y ya dentro de las opciones HTML, el tema de maquetación, la inclusión de una tabla de contenidos (por defecto situada en la parte superior derecha), numeración de secciones, selección del motor para renderizar ecuaciones en el documento y un archivo de estilos personalizados en formato CSS para ajustar algunas opciones finas de maquetación.\nUna opción que conviene destacar es la de forzar a que todos los recursos (imágenes, información de estilos, etc.) estén integrados en el propio archivo HTML, para facilitar la compartición o publicación directa del documento sin necesidad de aportar también los archivos auxiliares necesarios para mostrarlo en el navegador. Esta opción se muestra a continuación:\nformat:\n  html:\n    embed-resources: true",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Documentos individuales</span>"
    ]
  },
  {
    "objectID": "04-singledoc.html#chunks-de-código-ejecutable",
    "href": "04-singledoc.html#chunks-de-código-ejecutable",
    "title": "4  Documentos individuales",
    "section": "4.4 Chunks de código ejecutable",
    "text": "4.4 Chunks de código ejecutable\nLa característica más diferencial de los documentos creados con Quarto es la posibilidad de intercalar fragmentos de código ejecutable, llamadas chunks en el propio documento. Esto incluye también la opción de que dicho código genere diferentes resultados (numéricos, gráficos, tablas, animaciones, etc.) que se integren directamente en el documento. De este modo, si mantenemos actualizado el código siempre se generarán las versiones correcgtas de dichos resultados.\nLos fragmentos de código ejecutable tienen la siguiente estructura:\n```{r}\n#| label: id-fragmento\n\n# Aquí va el código ejecutable\na = c(1, 2, 3, 4)\nb = a^2\n```\nLa tripleta de caracteres ``` se denomina fence y delimita el comienzo y el final del fragmento de código. Justo a continuación del delimitador de apertura se escribe entre llaves el identificador del lenguaje de programación en el que está escrito el código de ese fragmento. Esa información se usa para elegir el resaltado de sintaxis apropiado para mostrar el código de ese lenguaje y para seleccionar el intérprete que ejecuta el código y produce los resultados.\nEn las siguientes líneas podemos incluir una o varias opciones de configuración específicas para ese fragmento de código, mediante la sintaxis #| opcion: valor. Por ejemplo, en el fragmento anterior la opción #| label: id-fragmento crea una etiqueta (que debe ser unívoca) para identificar a ese fragmento de código dentro del documento.\n\nLista de opciones para fragmentos de código.\n\nAlgunas opciones de uso frecuente son:\n\neval: true | false | [...]: Indica si se debe evaluar (ejecutar) el contenido de ese fragmento. Se puede pasar una lista de números de línea positivos o negativos para seleccionar explícitamente qué líneas de código se incluyen (positivos) o excluyen (negativos) de la ejecución.\necho: true | false | fenced | [...]: Indica si se debe incluir el código fuente del fragmento en el documento o no. La opción fenced incluye también el delimitador de celda como parte de la salida. Por último, también acepta una lista de números de línea positivos o negativos para seleccionar qué líneas de código se mostrarán o no en el fragmento.\noutput: true | false | asis: Para decidir si el resultado de la ejecución del código se incluye o no en el documento. El valor asisfuerza a que el resultado se trate como contenido Markdown en crudo.\nwarning: true | false: Indica si se deben incluir los mensajes de aviso en la salida.\nerror: true | false: Marca si los mensajes de error generados se incluyen en la salida.\nmessage: true | false: Indica si los mensajes de información generados se incluyen en la salida.\n\nCuando los fragmentos generan figuras, estas se insertan dentro del propio documento. Veamos un ejemplo:\n\n```{r}\n#| label: fig-example-cars\n#| fig-cap: \"Gráfico de correlación lineal positiva entre el kilometraje en ciudad y en carretera de diferentes modelos de coches.\"\n\nlibrary(ggplot2)\n#| label: scatterplot\n#| echo: true\n\nggplot(mpg, aes(x = hwy, y = cty, color = cyl)) +\n  geom_point(alpha = 0.5, size = 2) +\n  scale_color_viridis_c() +\n  theme_minimal()\n```\n\n\n\n\n\n\n\nFigura 4.7: Gráfico de correlación lineal positiva entre el kilometraje en ciudad y en carretera de diferentes modelos de coches.\n\n\n\n\n\n\n\n\n\n\n\nNumeración automática de figuras\n\n\n\nEs importante que el identificador de fragmento que elegimos para código que genera una o varias figuras comience por el prefijo fig-. De ese modo, nos aseguramos de que Quarto le asigne automáticamente una numeración a la figura generada y que podamos crear referencias cruzadas (enlaces internos) a dicha figura en nuestro documento.\nComo veremos más adelante, otros tipos de salida como las tablas también necesitan que se les asigne un patrón concreto en su identificador de fragmento para que se numeren de forma automática y se puedan referenciar dentro del documento.\n\n\nLa gestión de figuras en Quarto es bastante sofisticada, hasta el punto de que se pueden organizar de forma sencilla varias subfiguras con sus respectivas descripciones individuales, como se muestra en el siguiente ejemplo usando algunas opciones adiconales.\n```{r}\n#| label: fig-mpg-subplot\n#| fig-cap: \"Kilometraje en ciudad y en carretera de 38 modelos populares de coches.\"\n#|\n#| fig-subcap:\n#|   - \"Color por núm. de cilindros.\"\n#|   - \"Color por cubicaje del motor, en litros.\"\n#| layout-ncol: 1\n\nggplot(mpg, aes(x = hwy, y = cty, color = cyl)) +\n  geom_point(alpha = 0.5, size = 2) +\n  scale_color_viridis_c() +\n  theme_minimal()\n\nggplot(mpg, aes(x = hwy, y = cty, color = displ)) +\n  geom_point(alpha = 0.5, size = 2) +\n  scale_color_viridis_c(option = \"E\") +\n  theme_minimal()\n```\n\n\n\n\n\n\n\n\n\n\n\n(a) Color por núm. de cilindros.\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Color por cubicaje del motor, en litros.\n\n\n\n\n\n\n\nFigura 4.8: Kilometraje en ciudad y en carretera de 38 modelos populares de coches.\n\n\n\nAlgunas opciones frecuentes para chunks que generan figuras son:\n\nfig-width: Ancho de la figura.\nfig-height: Alto de la figura.\nfig-cap: String entre comillas que se insertará como descripción al pie de la figura (caption).\nfig-alt: Mensaje de texto alternativo que rellena el atributo alt de la imagen HTML (por ejemplo, para mejorar la accesibilidad del contenido).\nfig-dpi: Ajuste de la resolución de la figura (en puntos por pulgada).\n\nEl tutorial sobre fragmentos de código ejecutables de la documentación oficial presenta más información y ejemplos sobre cómo utilizar esta potente característica de Quarto.l",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Documentos individuales</span>"
    ]
  },
  {
    "objectID": "04-singledoc.html#herramientas-para-el-autor",
    "href": "04-singledoc.html#herramientas-para-el-autor",
    "title": "4  Documentos individuales",
    "section": "4.5 Herramientas para el autor",
    "text": "4.5 Herramientas para el autor\nAdemás de la capacidad de integrar código ejecutable y sus resultados en nuestros documentos científicos, Quarto incluye un buen número de recursos y herramientas para ofrecer una experiencia de autoría completa y eficiente.\n\n4.5.1 Secciones del documento\nComo ya vimos en el ejemplo de la Sección 4.3.3, existen dos opciones de configuración del documento HTML que nos permiten numerar las secciones e incorporar una tabla de contenidos generada automáticamente en la parte superior derecha de nuestro documento.\nformat:\n  html:\n    toc: true\n    number-sections: true\nUn funcionalidad importante para la creación de documentación científica es poder incluir referencias cruzadas, es decir, enlaces que nos lleven a otras secciones del documento. En Quarto esto se consigue siguiendo un sencillo procedimiento en dos pasos:\n\nAñadimos una etiqueta única para identificar la sección con la sintaxis:\n\n## Título de sección {#sec-etiqueta}\n\nReferenciamos en otro lugar del texto la etiqueta que hemos creado para esa sección, de forma que Quarto crea automáticamente el enlace (referencia cruzada) a dicha sección:\n\nEn el texto añadimos una referencia a la @sec-etiqueta\nSe puede ver un ejemplo de este tipo de referencias cruzadas creadas de forma automática al comienzo de esta misma sección. Por el contrario, si queremos que una sección del documento se excluya del esquema de numeración del resto de secciones, usamos en el título de esa sección la etiqueta especial:\n## Sección no numerada {.unnumbered}\nExisten varias opciones adicionales que controlan la forma y estilo con que se crean y numeran las secciones. Algunas de ellas son:\n\nanchor-sections: Hace que se muestre un enlace de anclado (para enlazar directamente esa sección en otro documento) cuando se pasa el ratón por encima del título de una sección.\ntoc-depth: Especifica cuántos niveles de profundidad en la numeración de secciones aparecen en la tabla de contenidos. Por defecto se muestran 3 niveles.\ntoc-location: body | left | right | left-body | right-body: Controla la ubicación en la que aparece la tabla de contenidos en el documento.\ntoc-title: Cadena de caracteres con el título de la tabla de contenidos.\ntoc-expand: Indica si se deben expandir todas las secciones de la tabla de contenidos o deben quedar colapsadas para que el usuario vaya pulsando en las que quiera expandir.\nnumber-depth: Determina la profundidad máxima a la que se numeran las secciones del documento (cuidado, debería estar en consonancia con el valor asignado a la opción toc-depth).\nnumber-offset: Permite ajustar el número por el que se empiezan a numerar las secciones. Si queremos que el documento comience a numerar la sección de más alto nivel como “4” entonces usamos number-offset: 3. Si queremos que el documento empiece en una sección de nivel 2 con numeración “1.5” debemos especificar number-offset: [1,4]. Definir un valor para esta opción implica que automáticamente number-sections: true.\n\n\n\n4.5.2 Ecuaciones\nOtro aspecto esencial de los documentos científicos es la aparición de símbolos, fórmulas y ecuaciones matemáticas. Existen varias librerías para HTML que permiten mostrar las ecuanciones debidamente formateadas en pantalla. Por su parte, LaTeX, debido a sus orígenes, siempre ha incluído potentes y versátiles herramientas para manejar este tipo de contenido, por lo que el soporte está garantizado para documentos en PDF.\nEn general, la sintaxis empleada para escribir las ecuaciones es muy similar a la que se utiliza en LaTeX.\n\nTutorial sobre expresiones matemáticas en LaTeX.\nResumen de sintaxis matemática en LaTeX.\n\nExisten dos maneras de mostrar las ecuaciones en nuestro contenido, siguiendo también una filosofía similar a la de los documentos LaTeX:\n\nEcuaciones en línea con el texto: para mostrar la ecuación dentro de una línea o párrafo, a la misma altura que el resto del texto.\nEcuaciones en modo display: la ecuación se muestra en un espacio aparte, entre dos párrafos de texto y con cierto margen de espacio en la zona superior e inferior.\n\nEjemplo de ecuación en línea: $F = m \\cdot a$\nQue produce como resultado: ejemplo de ecuación en línea: \\(F = m \\cdot a\\).\nEjemplo de ecuación en modo display:\n\n$$E = mc^{2}$$\nQue genera el siguiente resultado (ver debajo cómo añadir la numeración):\n\\[ E = mc^{2}  \\tag{4.1}\\]\nSi además queremos numerar nuestras ecuaciones, hay que acordarse de emplear el patrón de etiqueta identificadora unívoca eq-etiqueta para identificarla y luego poder insertar referencias internas a dicha ecuación en el texto.\n$$ E = mc^{2} $$ {#eq-energy}\nComo resultado, podemos insertar una a la Ecuación 4.1.\n\n\n4.5.3 Tablas\nLas tablas son otro contenido relevante que podemos formatear de diferentes maneras en los documentos generados con Quarto.\n\nIntroducción a la creación de tablas en Quarto.\n\nEn este caso, el editor visual nos puede simplificar mucho esta tarea. Se aconseja probarlo para ver la diferencia, ya que es una herramienta muy intuitiva. Sin embargo, siguiendo la misma línea que el resto del taller, aquí vamos a describir los detalles para crear este contenido directamente en el código Markdown del archivo.\nLa forma más directa de crear una tabla en Markdown es componer una tabla pipe, así denominada porque su sintaxis se basa en el operador | de la línea de comandos. Veamos un ejemplo.\n| Default | Left | Right | Center |\n|---------|:-----|------:|:------:|\n| 1       | 2    |     3 |    4   |\n| 22      | 23   |    24 |   25   |\n| 4       | 3    |     2 |   1    |\nEl resultado de incluir el código anterior en nuestro documento es:\n\n\n\nDefault\nLeft\nRight\nCenter\n\n\n\n\n1\n2\n3\n4\n\n\n22\n23\n24\n25\n\n\n4\n3\n2\n1\n\n\n\nPodemos observar cómo la clave para controlar el alineamiento horizontal del contenido de la tabla es situar apropiadamente el símbolo : en la línea justo debajo de la línea de título, que separa este del cuerpo de la tabla. Si no queremos incluir título es obligatorio que incluyamos la primera línea, pero podemos dejar las celdas en blanco.\nDebajo de la tabla podemos insertar la expresión : Caption de la tabla para incluir un mensaje descriptivo. También es posible utilizar directamente algunos elementos de estilo incluidos en las clases de Bootstrap, el entorno de estilo web que utiliza Quarto para componer las páginas (hemos visto antes cómo utilizar la opción de documento theme: cosmo para usar el tema Cosmo de Boostrap). Existen diferentes efectos, y uno de los más frecuentes es colorear en gris el fondo de las filas alternativamente así como resaltar la fila en la que está posada la flecha del ratón. Estos dos efectos son .striped y .hover, respectivamente.\n| Default | Left | Right | Center |\n|---------|:-----|------:|:------:|\n| 1       | 2    |     3 |    4   |\n| 22      | 23   |    24 |   25   |\n| 4       | 3    |     2 |   1    |\n\n: Caption de la tabla {.striped .hover}\n\nCaption de la tabla\n\n\nDefault\nLeft\nRight\nCenter\n\n\n\n\n1\n2\n3\n4\n\n\n22\n23\n24\n25\n\n\n4\n3\n2\n1\n\n\n\nPor último, de forma análoga a lo que hacemos para referenciar internamente ecuaciones y figuras en nuestro documento, también podemos etiquetar las tablas utilizando el patrón #tbl-etiqueta para referenciarlo como @tbl-etiqueta que queda formateado así: Tabla 4.1.\n| Default | Left | Right | Center |\n|---------|:-----|------:|:------:|\n| 1       | 2    |     3 |    4   |\n| 22      | 23   |    24 |   25   |\n| 4       | 3    |     2 |   1    |\n\n: Caption de la tabla. {#tbl-etiqueta .striped .hover}\n\n\n\nTabla 4.1: Caption de la tabla.\n\n\n\n\n\nDefault\nLeft\nRight\nCenter\n\n\n\n\n1\n2\n3\n4\n\n\n22\n23\n24\n25\n\n\n4\n3\n2\n1\n\n\n\n\n\n\nEl mismo patrón de etiqueta se debe emplear en la opción de identificación de chunks de código #| label: tbl-etiqueta si luego queremos referenciar la tabla generada por ese fragmento de código con una referencia cruzada.\nSe pueden consultar más detalles sobre la creación de subtablas, cambio de ubicación del caption, así como la creación de tablas grid que usan una sintaxis diferente y permiten incluir elementos de bloque arbitrarios en cada celda (múltiples párrafos, bloques de código, listas no numeradas o numeradas, etc.).\n+-----------+-----------+--------------------+\n| Fruta     | Precio    | Ventajas           |\n+===========+===========+====================+\n| Bananas   | $1.34     | - envoltorio       |\n|           |           | - color brillante  |\n+-----------+-----------+--------------------+\n| Oranges   | $2.10     | - rica en vitam. C |\n|           |           | - saborsa          |\n+-----------+-----------+--------------------+\n\n: Sample grid table.\n\nTabla grid de ejemplo.\n\n\n\n\n\n\n\nFruta\nPrecio\nVentajas\n\n\n\n\nBananas\n$1.34\n\nenvoltorio\ncolor brillante\n\n\n\nOranges\n$2.10\n\nrica en vitam. C\nsaborsa\n\n\n\n\n\n\n4.5.4 Llamadas\nEs posible incluir bloques de llamadas de atención, para resaltar notas prácticas, advertencias o consejos de especial interés. Además, se suele poner un título a la llamada para hacerla aún más informativa.\n::: {.callout-note}\n## Título de la nota\n\nExisten cinco tipos diferentes de llamaedas:\n`note`, `tip`, `warning`, `caution`, e `important`.\n:::\n\n\n\n\n\n\nTítulo de la nota\n\n\n\nExisten cinco tipos diferentes de llamaedas: note, tip, warning, caution, e important.\n\n\n\nIntroducción al uso de llamadas en Quarto.\n\n\n\n4.5.5 Citas bibliográficas\nLa gestión de referencias bibliográficas en Quarto se realiza codificando la información en formato BibTeX. Esto permite utilizar cualquiera de los formatos de citas bibliográficas soportados por este paquete, o bien incluir un fichero CLS que defina un formato estándar (APA, Chicago, IEEE, etc.).\nPor ejemplo, las opciones de documento\n---\ntitle: \"My Document\"\nbibliography: references.bib\ncsl: nature.csl\n---\nindican un fichero references.bib donde podemos almacenar la información sobre las referencias bibliográficas (que podemos conseguir de Google Scholar, Zotero u otras herramientas y servicios en Internet), así como un fichero de estilo de citas nature.cls (estilo definido por la editorial Nature).\n\nRepositorio CLS con estilos de citas.\nRepositorio Zotero con estilos de citas.\n\nDependiendo del estilo y formato de la cita, podemos utilizar una u otra sintaxis para indicar el autor y el año entre paréntesis, el autor fuera del paréntesis, números de página, capítulos, etc.\n\nTabla de referencia de sintaxis para citas en Quarto.\n\nPor último, la lista ordenada de referencias bibliográficas (según los criterios de estilo de citas que hayamos seleccionado) deben aparecer al final del documento. Para conseguirlo en un documento HTML, debemos incluir un código especial, que normalmente se coloca en una sección independiente y no numerada, tal y como se muestra en la Figura 4.9.\n\n\n\n\n\n\nFigura 4.9: Sintaxis para mostrar las referencias bibliográficas al final del documento.\n\n\n\nCuando la salida generada es en formato PDF y se usan los motores de gestión de referencias BibLaTeX o natbib, entonces la lista de referencias siempre aparece al final de documento y la etiqueta anterior se ignora. Finalmente, en el poco frecuente caso de que no queramos incluir ninguna referencia bibliográfica en nuestro documento podemos incluir en los metadatos de la cabecera del mismo la opción supress-bibliography: true.\n\n\n4.5.6 Estilo general del documento\nHasta el momento, el documento de ejemplo que hemos mostrado así como estos mismos apuntes utilizan siempre un formato de estilo o theme del entorno de desarrollo web Bootstrap, llamado cosmo. No obstante, existe una amplia lista de temas alternativos para modificar el estilo general de nuestro documento (combinación de colores, tipografía y tamaño de fuentes, organización del contenido, aspecto de los enlaces, etc.). El proyecto Quarto se encarga de combinar regularmente los temas de estilo más populares para que estén disponibles como opción del documento.\nEn este directorio de temas en GitHub se puede comprobar una lista actualizada de los posibles valores que podemos asignar a la opción theme en la cabecera del documento. Es útil experimentar con diversas opciones para encontrar la que más se ajuste al tipo de documento generado, a su contenido y a la audiencia a la que va dirigido.\nEn la página web https://bootswatch.com/ se puede acceder a una demo en línea de muchos de los temas disponibles.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Documentos individuales</span>"
    ]
  },
  {
    "objectID": "05-books.html",
    "href": "05-books.html",
    "title": "5  Libros",
    "section": "",
    "text": "5.1 Creación de proyectos de tipo book\nEl primer paso consiste en la creación de un proyecto de tipo book, utilizando la IDE de nuestra elección, por ejemplo, RStudio. La Figura 5.1 muestra la interfaz de RStudio para crear un nuevo proyecto de tipo book con Quarto. Como es habitual, seleccionamos un nombre para el directorio que almacena el proyecto tal y como se muestra en la Figura 5.2.",
    "crumbs": [
      "Libros con Quarto",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Libros</span>"
    ]
  },
  {
    "objectID": "05-books.html#creación-de-proyectos-de-tipo-book",
    "href": "05-books.html#creación-de-proyectos-de-tipo-book",
    "title": "5  Libros",
    "section": "",
    "text": "Figura 5.1: Interfaz en RStudio para la creación de un nuevo proyecto Quarto de tipo book.\n\n\n\n\n\n\n\n\n\nFigura 5.2: Diálogo para indicar el nombre del directorio que almacena el proyecto de tipo book y algunas opciones básicas de configuración, como el motor de ejecución de los bloques de código integrados en los documentos (resaltado en rojo).\n\n\n\n\nPágina de inicio del tutoríal sobre libros en la guía de Quarto.",
    "crumbs": [
      "Libros con Quarto",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Libros</span>"
    ]
  },
  {
    "objectID": "05-books.html#opciones-de-configuración",
    "href": "05-books.html#opciones-de-configuración",
    "title": "5  Libros",
    "section": "5.2 Opciones de configuración",
    "text": "5.2 Opciones de configuración\nAl contrario que en los documentos individuales, en los proyectos como los de tipo book que agrupan varios documentos (archivos .qmd) en una sola colección podemos indicar opciones globales de configuración para todo el proyecto en un archivo independiente _quarto.yml, que debe estar presente en el directorio raíz de nuestro proyecto.\nPor defecto, las opciones de configuración que presenta este archivo en un proyecto de este tipo recien creado son las siguientes.\nproject:\n  type: book\n\nbook:\n  title: \"primer-libro\"\n  author: \"Norah Jones\"\n  date: \"22/10/2024\"\n  chapters:\n    - index.qmd\n    - intro.qmd\n    - summary.qmd\n    - references.qmd\n\nbibliography: references.bib\n\nformat:\n  html:\n    theme: cosmo\n  pdf:\n    documentclass: scrreprt\n\neditor: visual\nLos nuevos elementos en este listado de opciones son:\n\nproject –&gt; type: book: Permite indicar el tipo de proyecto que queremos montar para que Quarto ajuste su comportamiento y pueda agrupar una colección de documentos. Activa la interpretación de opciones relacionadas con este tipo de proyectos.\nbook: Nueva categoría de opciones que indica la configuración especifica aplicable a todos los documentos de este proyecto, así como las opciones globales. Por ejemplo, el título, el autor y la fecha se mostrarán en una página de portada especial.\nchapters: Nueva subcategoría de opciones que permite insertar un listado de nombres de archivo que contienen las diferentes secciones o capítulos de nuestro libro.\nDebemos tener en cuenta que las secciones o capítulos se procesarán exactamente en el mismo orden en el que aparecen en este listado, por lo que es importante prestar atención a dicha ordenación.",
    "crumbs": [
      "Libros con Quarto",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Libros</span>"
    ]
  },
  {
    "objectID": "05-books.html#archivo-de-portada",
    "href": "05-books.html#archivo-de-portada",
    "title": "5  Libros",
    "section": "5.3 Archivo de portada",
    "text": "5.3 Archivo de portada\nAdemás del nuevo archivo _quarto.yml se genera otro archivo llamado index.qmd que contiene el material que se presentará como portada del libro o colección de documentos. Un archivo general se crea también en otros tipos de proyectos, por ejemplo para la página de inicio de un sitio web generado con Quarto. Es en esta página de portada en la que se consigna la información general de la configuración (título, autores, fecha, etc.).\nEl contenido de este archivo es el mismo que en cualquier otro documento, siguiendo las mismas reglas de sintaxis de Quarto para archivos .qmd que ya hemos visto.\nDebemos resaltar también que el título de esta página de portada no suele numerarse y, por tanto, es habitual que se configure como:\n# Preface {.unnumbered}",
    "crumbs": [
      "Libros con Quarto",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Libros</span>"
    ]
  },
  {
    "objectID": "05-books.html#herramientas-de-redacción",
    "href": "05-books.html#herramientas-de-redacción",
    "title": "5  Libros",
    "section": "5.4 Herramientas de redacción",
    "text": "5.4 Herramientas de redacción\nTodas las herramientas de redacción que ya hemos visto en el Capítulo 4 se pueden utilizar en el caso de los capítulos de un libro. Es importante resaltar que los enlaces a las secciones funcionan también desde documentos de otras secciones o capítulos diferentes del libro, aunque estén en otro archivo distinto.\n\n5.4.1 Estructura del libro\nAdemás de los capítulos estándar, también podemos organizar el contenido del libro en partes (que agrupan capíutlos relacionados entre sí), así como apéndices, presentados a continuación del contenido principal del libro para ofrecer material adicional.\nVeamos un ejemplo de configuración de un libro que incluya varias partes y que podemos integrar en el resto de la configuración del proyecto, dentro del archivo _quarto.yml.\nchapters:\n  - index.qmd\n  - preface.qmd\n  - part: dice.qmd\n    chapters: \n      - basics.qmd\n      - packages.qmd\n  - part: cards.qmd\n    chapters:\n      - objects.qmd\n      - notation.qmd\n      - modifying.qmd\n      - environments.qmd\nEs importante señalar que, en este caso, la opción part puede aceptar un archivo con extensión .qmd (como en el ejemplo), o bien una cadena de caracteres entre comillas que simplemente indique un título para la parte.\nAhora presentamos un ejemplo para los apéndices.\nbook:\n  title: \"mybook\"\n  author: \"Jane Doe\"\n  date: \"5/9/2021\"\n  chapters:\n    - index.qmd\n    - intro.qmd\n    - summary.qmd\n    - references.qmd\n  appendices:\n    - tools.qmd\n    - resources.qmd\nEs importante resaltar que estas opciones de configuración generan la salida apropiada (partes y apéndices) tanto en el caso de sitios web HTML como cuando generamos un documento PDF, siguiendo en el segundo caso la sintaxis estándar de LaTeX para indicar la estructura del documento.\n\nEjemplo de un conocido libro de H. Wickham creado en Quarto y accesible públicamente, que está organizado en partes que agrupan capítulos.\nOpciones de configuración adicionales para la estructura de un libro en Quarto.",
    "crumbs": [
      "Libros con Quarto",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Libros</span>"
    ]
  },
  {
    "objectID": "05-books.html#gestión-de-referencias",
    "href": "05-books.html#gestión-de-referencias",
    "title": "5  Libros",
    "section": "5.5 Gestión de referencias",
    "text": "5.5 Gestión de referencias\nComo ya se ha mencionado, las referencias internas (a figuras, tablas, ecuaciones y otras secciones del documento, entre otros elementos) funcionan exactamente igual que en los documentos individuales (consulta la Sección 4.5.1), con la ventaja adicional de que en un libro que combina diferentes capítulos la numeración de todos los elementos se actualiza para reflejar el número de capítulo como prefijo del número de elemento (por ejemplo, “Figura 1.2” para la segunda figura del capítulo 1).\nEs importante recalcar que para que la numeración automática de los elementos funcione adecuadamente, es imprescindible que comiencen por el prefijo adecuado (#sec- para secciones, #fig- para figuras, etc.).",
    "crumbs": [
      "Libros con Quarto",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Libros</span>"
    ]
  },
  {
    "objectID": "05-books.html#previsualización-del-proyecto",
    "href": "05-books.html#previsualización-del-proyecto",
    "title": "5  Libros",
    "section": "5.6 Previsualización del proyecto",
    "text": "5.6 Previsualización del proyecto\nPara previsualizar en nuestra máquina local el proyecto que hemos creado, utilizando RStudio, debemos seleccionar en el panel superior derecho la pestaña Build y pulsar el botón Render Book para generar todos los formatos de salida que estén configurados en el archivo _quarto.yml, tal y como se muestra en la Figura 5.3. Además, también existe la opción de seleccionar solo uno de estos formatos de salida si pulsamos con cuidado en la pequeña flecha junto al botón “Render Book”, para desplegar una lista de opciones de formato de salida y seleccionar uno de ellos, como muestra la Figura 5.4\n\n\n\n\n\n\nFigura 5.3: Botón para lanzar el proceso de previsualización del libro en RStudio.\n\n\n\n\n\n\n\n\n\nFigura 5.4: Listado de opciones de configuración que aparecen al pulsar la flecha junto al botón Render Book",
    "crumbs": [
      "Libros con Quarto",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Libros</span>"
    ]
  },
  {
    "objectID": "05-books.html#sec-pub-options",
    "href": "05-books.html#sec-pub-options",
    "title": "5  Libros",
    "section": "5.7 Publicación del proyecto",
    "text": "5.7 Publicación del proyecto\nExisten diferentes [opciones de publicación] para poner nuestro libro o colección de documentos disponible para otros usuarios, incluyendo:\n\nQuarto Pub.\nGitHub Pages, muy conveniente si queremos una solución integrada para gestión de versiones del código fuente de nuestro proyecto.\nNetlify, una plataforma de publicación web profesional que permite más opciones de ajuste y configuración.\n\nTambién es posible utilizar otros servicios para publicar documentos, libros y sitios web con Quarto, incluyendo GitLab (alternativa a GitHub), aunque no estarán tan automatizados e integrados con las herramientas que ofrece Quarto como las opciones anteriores.",
    "crumbs": [
      "Libros con Quarto",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Libros</span>"
    ]
  },
  {
    "objectID": "05-books.html#plantillas-y-personalización",
    "href": "05-books.html#plantillas-y-personalización",
    "title": "5  Libros",
    "section": "5.8 Plantillas y personalización",
    "text": "5.8 Plantillas y personalización\nAl igual que hemos explicado en el caso de los documentos individuales, se pueden utilizar opciones de configuración análogas para personalizar el estilo y el tema de diseño que podemos aplicar a nuestro libro o colección de documentos, tanto en la versión de sitio web HTML como en la versión de salida en formato PDF.\n\nGuía para la personalización del estilo de los libros en Quarto.\nGalería de ejemplo de algunos estilos para personalizar el aspecto de documentos Quarto.",
    "crumbs": [
      "Libros con Quarto",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Libros</span>"
    ]
  },
  {
    "objectID": "06-class-notes.html",
    "href": "06-class-notes.html",
    "title": "6  Taller: colección de apuntes",
    "section": "",
    "text": "6.1 Opciones de diseño del documento\nAdemás de las numerosas opciones que hemos explorado para ajustar el comportamiento de muchos elementos de nuestros documentos, Quarto todavía nos reserva muchas más alternativas para controlar el diseño de la página y la distribución de su contenido de forma que:\nEn este taller nos centramos en la generación de salida en HTML. Por defecto, en un documento HTML producido con Quarto tenemos un diseño estándar del espacio de la página en tres columnas:\nPor supuesto, las dimensiones de estas tres columnas son totalmente personalizables.",
    "crumbs": [
      "Libros con Quarto",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Taller: colección de apuntes</span>"
    ]
  },
  {
    "objectID": "06-class-notes.html#opciones-de-diseño-del-documento",
    "href": "06-class-notes.html#opciones-de-diseño-del-documento",
    "title": "6  Taller: colección de apuntes",
    "section": "",
    "text": "Ocupe toda la región principal (centro del documento).\nSobrepase los límites de la región principal.\nCubra todo el ancho de la pantalla (por ejemplo, cuando queremos representar mapas o figuras muy anchas, compuestas por varias gráficas en una misma fila).\nSe sitúe en los márgenes del documento.\nGuía para personalizar el diseño del documento (HTML).\nOpciones de configuración del diseño del documento (PDF).\n\n\n\nLa columna central, body más ancha, para el contenido principal de la página.\nLa columna izquierda, sidebar (barra lateral), que se suele emplear en los libros para la tabla de contenidos desplegable que permite navegar por la colección de documentos.\nLa columna derecha, margin, que se suele utilizar para mostrar la tabla de contenidos del documento o capítulo que aparece en el body en ese momento, junto con otros enlaces a contenido adicional (e.g. enlace al código fuente, a la web de la organización o editorial, etc.).\n\n\n\n6.1.1 Contenido principal\nSi no especificamos ninguna variación en la configuración, el documento de Quarto muestra los elementos ocupando todo el ancho de la columna central (document body).\nSi queremos que el contenido sobrepase un poco los límites de ese espacio central, pero sin llegar a ocupar todo el ancho de la pantalla, podemos usar una nueva sección div HTML con un estilo específico:\n:::{.column-body-outset}\nOutset content...\n:::\nPara ampliar aún mas el ancho de presentación, pero dejando cierto margen de espacio respecto a ambos bordes de la pantalla se puede usar en su lugar el estilo {.column-page}. Por último, si realmente queremos ocupar todo el ancho de la pantalla (sin dejar margen a ambos lados) se puede usar el estilo {.column-screen}. Estas opciones de diseño también son aplicables a la configuración de los bloques de código ejecutable. Veamos un ejemplo:\n\n```{r}\n#| column: page\n\nknitr::kable(\n  mtcars[1:6, 1:10]\n)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\n\n\n\n\nMazda RX4\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n\n\nMazda RX4 Wag\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n\n\nDatsun 710\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n\n\nHornet 4 Drive\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n\n\nHornet Sportabout\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n\n\nValiant\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n\n\n\n\n\nPor último, las opciones de estilo {.column-screen-inset} o {.column-screen-inset-shaded} dan una apariencia de ocupar el ancho de la pantalla al completo pero dejando un ligero margen en los bordes (con sombreado, en el segundo caso).\n\n\n6.1.2 Contenido en los márgenes\nEl estilo {.column-margin} permite ubicar en la columna derecha de la página cualquier elemento, ya sea un texto, una figura o gráfica, una tabla, ecuación, etc.\n::: {.column-margin}\n![A margin image](image.png)\n:::\nVeamos un ejemplo aplicado a una ecuación que se muestra al margen:\n\n\nWe know from the first fundamental theorem of calculus that for \\(x\\) in \\([a, b]\\):\n\\[\\frac{d}{dx}\\left( \\int_{a}^{x} f(u)\\,du\\right)=f(x).\\]\nAhora con una figura al margen:\n\n```{r}\n#| label: fig-mtcars\n#| fig-cap: \"MPG vs horsepower, colored by transmission.\"\n#| column: margin\n\nlibrary(ggplot2)\nmtcars2 &lt;- mtcars\nmtcars2$am &lt;- factor(\n  mtcars$am, labels = c('automatic', 'manual')\n)\nggplot(mtcars2, aes(hp, mpg, color = am)) +\n  geom_point() +\n  geom_smooth(formula = y ~ x, method = \"loess\") +\n  theme(legend.position = 'bottom')\n```\n\n\n\n\n\n\n\n\nFigura 6.1: MPG vs horsepower, colored by transmission.\n\n\n\n\nPor último, probamos con una tabla ubicada en el margen:\n\n```{r}\n#| column: margin\n\nknitr::kable(\n  mtcars[1:6, 1:3]\n)\n```\n\n\n\n\n\n\nmpg\ncyl\ndisp\n\n\n\n\nMazda RX4\n21.0\n6\n160\n\n\nMazda RX4 Wag\n21.0\n6\n160\n\n\nDatsun 710\n22.8\n4\n108\n\n\nHornet 4 Drive\n21.4\n6\n258\n\n\nHornet Sportabout\n18.7\n8\n360\n\n\nValiant\n18.1\n6\n225\n\n\n\n\nTambién es posible especificar opciones individualizadas para cada elemento cuando un bloque de código genera varios resultados.\nSe recomienda consultar la [guía completa de diseño de los artículos] de Quarto para explorar más opciones adicionales de configuración.\n\n\n6.1.3 Notas al margen y citas bibliográficas\nSi se añaden las siguientes opciones en la cabecera del documento (o de la salida HTML del proyecto global), se modifica la ubicación de las notas al pie y las citas bibliográficas, que pasan a mostrarse en el margen derecho del documento, a la misma altura de la llamada o cita en el texto principal, siguiendo los principios de diseño de los documentos de Tufte:\nreference-location: margin\ncitation-location: margin\nAdicionalmente, también podemos poner notas puntuales (no numeradas) en el margen del documento con el estilo de párrafo {.aside}:\n[This is a span that has the class `aside` which places \nit in the margin without a footnote number.]{.aside}\nThis is a span that has the class aside which places it in the margin without a footnote number.",
    "crumbs": [
      "Libros con Quarto",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Taller: colección de apuntes</span>"
    ]
  },
  {
    "objectID": "06-class-notes.html#anotaciones-en-bloques-de-código",
    "href": "06-class-notes.html#anotaciones-en-bloques-de-código",
    "title": "6  Taller: colección de apuntes",
    "section": "6.2 Anotaciones en bloques de código",
    "text": "6.2 Anotaciones en bloques de código\nUna característica muy útil para la creación de documentació y tutoriales es la de anotar las líneas dentro de los bloques de código ejecutable. Veamos un ejemplo:\n```r\n#| label: demo-code-annotation\n#| message: false\n#| output: false\nlibrary(tidyverse)\nlibrary(palmerpenguins)\npenguins |&gt;                                      # &lt;1&gt;\n  mutate(                                        # &lt;2&gt;\n    bill_ratio = bill_depth_mm / bill_length_mm, # &lt;2&gt;\n    bill_area  = bill_depth_mm * bill_length_mm  # &lt;2&gt;\n  )                                              # &lt;2&gt;\n```\n1. Take `penguins`, and then,\n2. add new columns for the bill ratio and bill area.\nQue produce el siguiente resultado:\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n1penguins |&gt;\n2  mutate(\n    bill_ratio = bill_depth_mm / bill_length_mm,\n    bill_area  = bill_depth_mm * bill_length_mm\n  )\n\n\n1\n\nTake penguins, and then,\n\n2\n\nadd new columns for the bill ratio and bill area.\n\n\n\n\nSe pueden utilizar más opciones de configuración para controlar cómo se muestran las anotaciones de código (al hacer click sobre la anotación, al pasar el ratón por encima o la opción por defecto que hemos visto).\n\nGuía para anotación de líneas en bloques de código",
    "crumbs": [
      "Libros con Quarto",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Taller: colección de apuntes</span>"
    ]
  },
  {
    "objectID": "06-class-notes.html#configuración-del-proyecto",
    "href": "06-class-notes.html#configuración-del-proyecto",
    "title": "6  Taller: colección de apuntes",
    "section": "6.3 Configuración del proyecto",
    "text": "6.3 Configuración del proyecto\n\n6.3.1 Opciones globales\n\nGuía de referencia de opciones globales del diseño gráfico del documento (HTML).\nGuía de referencia de opciones globales del diseño gráfico del documento (PDF).\n\n\n\n6.3.2 Idioma de los documentos\nUna opción de configuración muy interesante para nuestros documentos y proyectos es la de especificar el idioma de los mismos. Por defecto, los documentos de Quarto se generan en inglés. Si embargo, varias herramientas, incluyendo paquetes LaTeX para localización del contenido y división de palabraas, así como Pandoc y el propio Quarto pueden traducir muchas etiquetas automáticamente (“Figura”, “Tabla”, “Ecuación”, etc.) al idioma adecuado.\nPara ello, tenemos que proporcionar un nuevo valor para la opción lang en la cabecera de nuestro documento o en el archivo de configuración _quarto.yml de nuestro proyecto:\n---\ntitle: \"Mi documento en castellano\"\nlang: es    \n---\nTambién es posible ofrecer traducciones personalizadas para etiquetas y campos estándar del documento o proyecto, de forma que se ajuste perfectamente a nuestras directrices de estilo o las de nuestra organización. Para más detalles, consulta la siguiente guía:\n\nConfiguración de idioma en documentos Quarto.\n\nEn particular, si vamos a proporcionar una larga lista de traducciones alternativas conviene codificarlas en un fichero independiente y pasarlo a las opciones de configuración del documento o proyecto:\nlanguage: custom_translations.yml\nPodemos llegar incluso al extremo de tener traducciones personalizadas para diferentes idiomas, que se usan en función del valor que pasemos a la opción de selección de idioma lang.\nRespecto al soporte multilenguaje simultáneo (el mismo documento en varios idiomas), dicha característica todavía no está soportada en Quarto. Sin embargo, un paquete de reciente creación en la comunidad ROpenSci llamado babledown (aún en fase expermental), permite gestionar estas versiones multidioma de forma simultánea (mostrando en un idioma enlaces al resto de idiomas disponibles). Más aún, el objetivo principal de este paquete es ofrecer una interfaz para el servicio de traducción automática DeepL, de forma que se traduzcan automáticamente los textos de nuestros documentos a otros idiomas.\n\n\n6.3.3 Enlaces a otros formatos\nCuando generamos un documento Quarto en múltiples formatos, de manera automática se debería generar en la parte superior derecha (o en algún punto de la columna a la derecha de la página) un enlace a las otras versiones disponibles de dicho documento. La figura Figura 6.2 muestra un ejemplo del enlace que aparece en la página:\n\n\n\n\n\n\nFigura 6.2: Enlace a otra versión en PDF del documento creado con Quarto\n\n\n\nPara que esto suceda, tenemos que declarar que se genere la salida del docoumento en varios formatos:\ntitle: Sample Page\nauthor: Sarah Connor\ndate: last-modified\ntoc: true\nformat: \n  html: default\n  pdf: default\n  ipynb: default\nLas opciones anteriores generarían dos enlaces en la página HTML (el formato por defecto): uno para descargar la versión alternativa en PDF y otro para descargar la versión en formato notebook de Jupyter.\nSe puede consultar la siguiente página de la guía de Quarto para descubrir más opciones de configuración, incluyendo cómo personalizar los textos de los enlaces o los formatos que se muestran para descarga:\n\nGuía para incluir enlaces a otros formatos del documento\n\nEs importante saber que los proyectos de tipo book funcionan de una manera un tanto diferente, por ser un tipo de proyecto especial. En este caso, el enlace de descarga para versiones en otros formatos se pone junto al título del libro (en la parte superior izquierda) y se activa con la siguiente opción:\nbook:\n  downloads: [pdf]",
    "crumbs": [
      "Libros con Quarto",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Taller: colección de apuntes</span>"
    ]
  },
  {
    "objectID": "06-class-notes.html#ejercicio-personalizar-el-estilo-gráfico-del-documento",
    "href": "06-class-notes.html#ejercicio-personalizar-el-estilo-gráfico-del-documento",
    "title": "6  Taller: colección de apuntes",
    "section": "6.4 Ejercicio: personalizar el estilo gráfico del documento",
    "text": "6.4 Ejercicio: personalizar el estilo gráfico del documento\nAhora, vamos a practicar con un ejemplo en el que se combinan varios aspectos que hemos estado tratando en este capítulo.\n\nDescarga este documento de ejemplo en tu equipo: Ejemplo apuntes Tufte.\nCrea un nuevo proyecto en RStudio, indicando como directorio de trabajo aquel en el que has guardado el ejemplo.\nPrevisualiza el documento en su versión HTML. Comprueba que hay un enlace para descargar también la versión en PDF.\nModifica algunos de los ejemplos para entender mejor cómo funcionan las opciones de configuración de los bloques de código ejecutables y los estilos gráficos aplicables al contenido en formato Markdown.\nModifica las dimensiones de la columna central (document body), para reducir su anchua 50 píxeles.\n\nReferencias adicionales para el ejercicio práctico\n\nGalería de ejemplo de plantillas de documentos en Quarto.\nDocumento de ejemplo con los estilos gráficos de Tufte handouts.\n\nEjemplo de documento HTML con diseño gráfico Tufte handouts.",
    "crumbs": [
      "Libros con Quarto",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Taller: colección de apuntes</span>"
    ]
  },
  {
    "objectID": "06-class-notes.html#personalización-de-los-libros",
    "href": "06-class-notes.html#personalización-de-los-libros",
    "title": "6  Taller: colección de apuntes",
    "section": "6.5 Personalización de los libros",
    "text": "6.5 Personalización de los libros\nEs importante entender la diferencia entre un proyecto configurado como libro y otro configurado como website. En el caso de un libro, se aplicarán las mismas opciones de formateo y diseño gráfico a todos los documentos que forman parte del mismo, puesto que se combinan en un solo documento (esto queda más claro cuando el formato de salida es PDF, puesto que se genera un único archivo con todo el contenido). Sin embargo, cuando creamos un sitio web es posible aplicar opciones de diseño y configuración personalizadas a cada documento del sitio, puesto que se comportan de forma independiente (aunque es posible aplicar también opciones globales para todo el sitio web).\nEn consecuencia, en un proyecto de tipo book cualquier opción de renderizado (incluso las específicas de un formato de salida) deben especificarse en el archvio global _quarto.yml. Se pueden utilizar muchas de las herramientas aplicables a los sitios web con Quarto (barras de navegación, encabezado y pie de página, barra de búsqueda textual, etc.). No obstante, todas estas opciones hay que especificarlas bajo la etiqueta book en el caso de un libro, no bajo la etiqueta website.\nUna excepción a esta regla es la opción global output-dir, para seleccionar un directorio de salida diferentes donde almacenar los archivos HTML, PDF, etc. del libro ya renderizado. Esa opción se debe poner debajo de la etiqueta project:\nproject:\n  type: book\n  output-dir: docs\nPor contra, la opción output-file, que cambia el nombre del fichero de salida generado (por defecto es el título del documento), se pone debajo de la etiqueta book:\nbook:\n  title: \"El título de este libro es una cosa larguísima\"\n  author: \"Jane Doe\"\n  output-file: \"nombre-corto\"\n\n\n\n\n\n\nExtensiones de los archivos de salida\n\n\n\nCuando configuremos un nombre personalizado para el fichero de salida del libro con la opción output-file no debemos añadir una extensión, ya que ésta se añadirá automáticamente en función del tipo de fichero de salida generado.\n\n\n\n\n\n\n\n\nPersonalización en LaTeX\n\n\n\nAunque no nos estamos centrando en la producción de salida LaTeX/PDF en este taller, aprovechamos este punto para resaltar que es posible también utilizar paquetes, scripts y otras herramientas LaTeX que ya tengamos desarrolladas previamente.\nEl método más directo (aunque a bajo nivel) para introducir los cambios es crear todo el libro con Quarto y compilar la salida en formato latex.\n\n\nTerminal\n\nquarto render --to latex\n\nEsto nos dejará todo el código fuente de LaTeX dentro del subdirectorio _book/book-latex (o en el directorio de salida que hayamos configurado). Podemos acabar de editar esos ficheros y compilar con otra herramienta (e.g. un editor LaTeX o usando make) el documento final.\nSin embargo, si los cambios se limitan a modificar las opciones de configuración estándar del documento en LaTeX, entonces podemos usar la extensa [lista de variables de configuración para LaTeX de Pandoc], con la que podremos indicar:\n\nOpciones de clase (páginas a doble cara, tamaño de página).\nLa opción documentclass para cambiar la plantilla del documento base; normalmente, Quarto usa scrreport, scrbook o scrartcl (clases del paquete LaTeX KOMA-Script).\nLa opción geometry para cambiar las dimensiones de la página, los márgenes, etc.\nFuentes y tipos de letra, color de la fuente, etc.\nEnlaces: color, estilo, ubicación, etc.\n\nPor último, debemos tener en cuenta que si en alguno de los capítulos de nuestro libro insertamos notas en el margen, figuras al margen o cualquier otro elemento en los márgenes, entonces el área de texto de los demás capítulos se mantendrá más reducida (dejando espacio en blanco en el margen), para poder presentar adecuadamente esos elementos en el margen de las páginas que sí los contienen. Nuevamente, esto se debe a que en el libro PDF la maquetación es común a todo el documento.",
    "crumbs": [
      "Libros con Quarto",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Taller: colección de apuntes</span>"
    ]
  },
  {
    "objectID": "06-class-notes.html#plantillas-y-extensiones-de-quarto",
    "href": "06-class-notes.html#plantillas-y-extensiones-de-quarto",
    "title": "6  Taller: colección de apuntes",
    "section": "6.6 Plantillas y extensiones de Quarto",
    "text": "6.6 Plantillas y extensiones de Quarto\nPor si no fuese suficiente con la larga lista de funcionalidades y opciones de configuración de Quarto estándar, se pueden instalar extensiones para ampliar todavía más su funcionalidad o modificar su comportamiento.\n\nCatálogo de extensiones disponibles para Quarto.\n\nEs importante saber que antes de utilizar una extensión debemos de instalarla localmente y, además, que las extensiones se instalan para cada carpeta de proyeto en la que tengamos un documento individual, website, libro, etc. Por tanto, cada proyecto puede tener su propio listado de extensiones de Quarto instaladas y diferente del de otros proyectos.\nLas extensiones se suelen publicar como proyectos en GitHub, por ejemplo la extensión quarto-ext/fontawesome. Si pulsamos en el enlace anterior vemos que una extensión es un conjunto de ficheros en un repositorio. Al instalar la extensión, estos ficheros se copiarán localmente en el directorio de nuestro proyecto, dentro de una carpeta de nombre _extensions.\nPor ejemplo, supongamos que queremos instalar en nuestro proyecto mi-projecto dos nuevas extensiones creadas por quarto-ext en GitHub, que se llaman fontawesome y video. En una terminal del sistema, vamos al directorio de trabajo de nuestro proyecto (este paso previo es importante) y ejecutamos los comandos para instalarlas.\n\n\nTerminal\n\ncd myblog\nquarto add quarto-ext/fontawesome\nquarto add quarto-ext/video\n\n\n\n\n\n\n\nExtensiones en documentos sin proyecto\n\n\n\nNo es obligatorio que tengamos un proyecto creado para instalar extensiones y aplicarlas a documentos Quarto. Si tenemos uno o varios documentos en un directorio (aunque no sea un proyecto) y ejecutamos los comandos para instalar extensiones dentro de ese directorio, entonces cualquier documento situado en ese directorio puede acceder a dichas extensiones.\n\n\nLas extensiones están organizadas dentro de cuatro grandes tipos:\n\nCódigos acortados o filtros: permiten usar una sintaxis más breve para operaciones complicadas o aplicar filtros de diversa índole para manejo de contenidos.\nArtículos de revista: extensiones que ya contienen los archivos de estilo necesarios para generar artículos científicos según el formato requerido por diversas organizaciones y editoriales (véase ?sec-scientific-articles).\nFormatos personalizados: Plantillas que aplican formatos predefinidos a nuestros documentos.\nReveal.js: Plantillas y temas para la creació de diapositivas con Quarto utilizando esta biblioteca JavaScript.",
    "crumbs": [
      "Libros con Quarto",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Taller: colección de apuntes</span>"
    ]
  },
  {
    "objectID": "06-class-notes.html#publicación-del-proyecto",
    "href": "06-class-notes.html#publicación-del-proyecto",
    "title": "6  Taller: colección de apuntes",
    "section": "6.7 Publicación del proyecto",
    "text": "6.7 Publicación del proyecto\nSi queremos publicar nuestro proyecto (documento, libro, sitio web), tenemos varias opciones de publicación, como ya vimos en la Sección 5.7. De entre las opciones disponibles, una bastante directa y que no tiene coste es utilizar GitHub Pages.\nGitHub Pages es un método de publicación de documentación asociada a un proyecto de GitHub. Esencialmente, tenemos que seguir un procedimiento ya definido para subir los archivos ya compilados de nuestro proyecto a GitHub y configurar ciertos parámetros de nuestro proyecto en esa plataforma. Como resultado, el servicio GitHub Pages toma ese contenido y lo publica en un sitio web, asignándole una URL para que sea accesible mediante un navegador (igual que estos mismos apuntes).\nAquí vamos a explicar el método para publicar nuestro contenido utilizando el comando quarto publish.\n\n6.7.1 Método con quarto-publish\n\n\n\n\n\n\nAntes de empezar a usar Git y GitHub con RStudio\n\n\n\nComenzar a utilizar un Sistema de Control de Versiones (SCV) como Git y un servicio como GitHub para gestionar nuestros proyectos es una tarea factible pero no tan sencilla como puede parecer, sobre todo si no has recibido previamente formación sobre estas tecnologías o no has aprendido a usarlas por tu cuenta.\nPor tanto, hacemos una llamada a la cautela para afrontar el contenido de esta sección armados de mucha paciencia, ganas de aprender y sobre todo tiempo para seguir todos los pasos descritos en los diferentes capítulos de varios tutoriales.\n\n\nPara poder publicar nuestro proyecto con este método, primero hemos tenido que crear un proyecto nuevo en GitHub, clonarlo en nuestra máquina y crear un nuevo proyecto (con RStudio o MS Visual Studio) dentro del directorio del proyecto para que esté bajo control de versiones. Alternativamente, también podemos realizar este proceso a la inversa: crear primero todo el proyecto en nuestra máquina, para luego subirlo a GitHub.\nEn cualquiera de los dos casos, el contenido de este taller no cubre la parte de poner nuestro proyecto en un SCV (Sistema de Control de Versiones) como Git, para después subirlo a un servicio como GitHub. No obstante, dejamos a continuación unos enlaces a un tutorial paso a paso que nos guiará por este proceso.\n\nSi no tenemos ya una cuenta de usuario/a en GitHub, debemos registrar una nueva cuenta.\nAhora, debemos instalar Git en nuestra máquina, si no estaba ya instalado previamente.\nPara no tener problemas después cuando interactuemos con GitHub, es preciso configurar un método de autenticación para acceder a la plataforma con nuestro usuario. La forma más sencilla es mediante el navegador web y configurando un sistema de autenticación de doble factor (2FA). La opción más cómoda es instalar la app de GitHub en tu móvil y seguir las instrucciones. Una vez que esté funcionando:\n\nAbrimos la página web de GitHub en el navegador e ingresamos con nuestro usuario y contraseña.\nUsamos la app de GitHub en el móvil para confirmar nuestra identidad.\n\nConectamos RStudio con Git y GitHub.\nAhora ya podemos crear un nuevo proyecto en GitHub de varias formas:\n\nNuevo proyecto primero en GitHub.\nProyecto que ya existe en la máquina local y lo copio en un nuevo repositorio clonado desde GitHub.\nProyecto que ya existe y lo subo a un repositorio de GitHub (sin clonarlo localmente).\n\n\nAhora ya podemos trabajar en nuestro proyecto, poniendo en práctica lo explicado hasta el momento en este taller para añadir secciones, bloques de código ejecutable, figuras, tablas, ecuaciones y demás elementos y opciones de configuración. En nuestra máquina, podemos previsualizar periódicamente el resultado (bontón Render en RStudio). Es conveniente que cada poco tiempo, confirmemos los cambios en Git.\n\n\n\n\n\n\nConfirmación manual de cambios\n\n\n\nAl contrario que en otros servicios que controlan cambios en ficheros (como Google Docs o MS Office 365 en OneDrive), Git no controla automáticamente los cambios realizados en los archivos. Por eso, cada cierto tiempo, cuando hemos terminado cambios relacionados y antes de seguir cambiando muchas cosas más, debemos indicar a Git que queremos confirmar el trabajo hecho hasta ese punto. En el último enlace del párrafo anterior se explica cómo hacerlo desde RStudio (vídeo incluido).\n\n\nFinalmente, cuando ya tenemos una versión publicable de nuestro proyecto podemos seguir las siguientes instrucciones para publicar el proyecto con el comando quarto publish que automatiza varias fases del proceso.\n\nPublicar un proyecto Quarto con GitHub Pages y el comando quarto publish.\n\n\n\n\n\n\n\nEnviar los cambios de la rama main a GitHub\n\n\n\nSi has prestado atención al último tutorial, verás que la publicación de los contenidos se hace en una rama diferente de la principal de tu repositorio en GitHub, llamada gh-pages. A esa rama sólo se van a subir los ficheros de salida ya generados en los formatos que hayamos configurado en nuestro proyecto (HTML, PDF, etc.).\nEs muy importante darse cuenta de que los ficheros fuente de nuestro proyecto, con extensión .qmd, _quarto.yml etc. no se han copiado al repositorio remoto y, por tanto, todavía no tenemos una “copia de seguridad” de dichos archivos en GitHub.\nPara conseguir esto, desde RStudio (pestaña Git) podemos hacer una operación push que envía los commits (cambios confirmados) desde nuestra máquina local al repositorio remoto. Alternativamente, también podemos abrir una terminal de sistema en RStudio y ejecutar (en el directorio raíz del proyecto) el siguiente comando:\n\n\nTerminal\n\ngit push origin main\n\nSi todo va correctamente, aparecerán varios mensajes en pantalla informando del progreso de la subida y confirmando que el historial de cambios en nuestro repositorio local ya está sincronizado con el repositorio remoto alojado en GitHub.",
    "crumbs": [
      "Libros con Quarto",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Taller: colección de apuntes</span>"
    ]
  },
  {
    "objectID": "07-manuscripts.html",
    "href": "07-manuscripts.html",
    "title": "7  Artículos y publicaciones científicas",
    "section": "",
    "text": "7.1 Figuras y gráficos para publicación",
    "crumbs": [
      "Publicaciones científicas",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Artículos y publicaciones científicas</span>"
    ]
  },
  {
    "objectID": "07-manuscripts.html#ejemplos-y-recomendaciones",
    "href": "07-manuscripts.html#ejemplos-y-recomendaciones",
    "title": "7  Artículos y publicaciones científicas",
    "section": "7.2 Ejemplos y recomendaciones",
    "text": "7.2 Ejemplos y recomendaciones\n\n7.2.1 Plantilla para artículos en revistas Elsevier\n:: {.callout-warning} ## Requisito: tener instalado LaTeX\nEn este apartado se muestra cómo generar un draft de un artículo para enviar a una revista científica de la editorial Elsevier. Para que este proceso funcione, recuerda que previamente debes tener instalada una distribución de LaTeX en tu equipo (como TeX Live) o bien instalar la distribución mínima TinyTeX en RStudio. :::\nEn este caso, los pasos a seguir son bastante sencillos:\n\nCreamos un nuevo directorio para guardar nuestro proyecto, por ejemplo, una carpeta con el nombre ejemplo-elsevier.\nEn la terminal (por ejemplo en RStudio, pestaña en el panel inferior izquierdo), entramos en la carpeta recién creada y ejecutamos un comando para descargar la plantilla y empezar a usarla:\n\n\n\nTerminal\n\ncd ejemplo-elsevier\nquarto use template quarto-journals/elsevier\n\n\nCreamos un nuevo proyecto en RStudio sobre el directorio ya existente en el que hemos descargado los archivos de la plantilla.\nAbrimos el archivo ejemplo-elsevier.qmd y pulsamos el botón Render para generar el la salida en PDF.\n\nSi ya teníamos creado previamente nuestro proyecto con un documento genérico de Quarto no tenemos que empezar desde cero. Basta con abrir una terminal dentro del directorio del proyecto y ejecutar:\n\n\nTerminal\n\nquarto add quarto-journals/elsevier\n\nPor último, si queremos generar el artículo draft en formato PDF desde la línea de comandos, ejecutamos:\n\n\nTerminal\n\nquarto render article.qmd --to elsevier-pdf\n\nFíjate bien en la opción de formato de salida que se especifica en el archivo .qmd para generar el artículo draft:\n\n\nejemplo-elsevier.qmd\n\nformat:\n  elsevier-pdf:\n    keep-tex: true",
    "crumbs": [
      "Publicaciones científicas",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Artículos y publicaciones científicas</span>"
    ]
  },
  {
    "objectID": "08-FAIR.html",
    "href": "08-FAIR.html",
    "title": "8  Principios FAIR",
    "section": "",
    "text": "8.1 Visión general",
    "crumbs": [
      "Publicaciones científicas",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Principios FAIR</span>"
    ]
  },
  {
    "objectID": "08-FAIR.html#publicación-del-código-fuente",
    "href": "08-FAIR.html#publicación-del-código-fuente",
    "title": "8  Principios FAIR",
    "section": "8.2 Publicación del código fuente",
    "text": "8.2 Publicación del código fuente",
    "crumbs": [
      "Publicaciones científicas",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Principios FAIR</span>"
    ]
  },
  {
    "objectID": "08-FAIR.html#publicación-de-conjuntos-de-datos",
    "href": "08-FAIR.html#publicación-de-conjuntos-de-datos",
    "title": "8  Principios FAIR",
    "section": "8.3 Publicación de conjuntos de datos",
    "text": "8.3 Publicación de conjuntos de datos",
    "crumbs": [
      "Publicaciones científicas",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Principios FAIR</span>"
    ]
  },
  {
    "objectID": "08-FAIR.html#gestión-de-referencias",
    "href": "08-FAIR.html#gestión-de-referencias",
    "title": "8  Principios FAIR",
    "section": "8.4 Gestión de referencias",
    "text": "8.4 Gestión de referencias\nDOI\nFigshare\nZenodo\narXiv\netc.",
    "crumbs": [
      "Publicaciones científicas",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Principios FAIR</span>"
    ]
  },
  {
    "objectID": "09-add-resources.html",
    "href": "09-add-resources.html",
    "title": "9  Recursos adicionales",
    "section": "",
    "text": "Listado de recursos adicionales de interés.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, D. E. (1984). Literate Programming. Comput. J., 27(2), 97-111. https://doi.org/10.1093/comjnl/27.2.97",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Recursos adicionales</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "Referencias",
    "section": "",
    "text": "Barba, L. A. (2018). Terminologies for reproducible research. arXiv\nPreprint arXiv:1802.03311.\n\n\nBegley, C., & Ellis, L. (2012). Drug\ndevelopment: Raise standards for preclinical cancer research.\nNature.[Online]. 483 (7391).\n\n\nBrainard, J., You, J., et al. (2018). What a massive database of\nretracted papers reveals about science publishing’s “death\npenalty.” Science, 25(1), 1–5.\n\n\nBurman, L. E., Reed, W. R., & Alm, J. (2010). A call for replication\nstudies. Public Finance Review, 38(6), 787–793.\n\n\nIoannidis, J. P. (2005). Why most published research findings are false.\nPLoS Medicine, 2(8), e124.\n\n\nKnuth, D. E. (1984). Literate programming. Comput. J.,\n27(2), 97–111. https://doi.org/10.1093/comjnl/27.2.97\n\n\nLeek, J. T., & Peng, R. D. (2015). Reproducible\nresearch can still be wrong: Adopting a prevention approach.\nProceedings of the National Academy of Sciences,\n112(6), 1645–1646.\n\n\nPeng, R. D. (2011). Reproducible research in computational science.\nScience, 334(6060), 1226–1227.\n\n\nWicherts, J. M., Borsboom, D., Kats, J., & Molenaar, D. (2006). The\npoor availability of psychological research data for reanalysis.\nAmerican PAsychologist, 61(7), 726.",
    "crumbs": [
      "Referencias"
    ]
  },
  {
    "objectID": "A-command-ref.html",
    "href": "A-command-ref.html",
    "title": "Apéndice A — Comandos de utilidad",
    "section": "",
    "text": "A.1 Comandos Quarto",
    "crumbs": [
      "Apéndices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Comandos de utilidad</span>"
    ]
  },
  {
    "objectID": "A-command-ref.html#celdas-de-código-en-r",
    "href": "A-command-ref.html#celdas-de-código-en-r",
    "title": "Apéndice A — Comandos de utilidad",
    "section": "A.2 Celdas de código en R",
    "text": "A.2 Celdas de código en R",
    "crumbs": [
      "Apéndices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Comandos de utilidad</span>"
    ]
  },
  {
    "objectID": "B-IDEs.html",
    "href": "B-IDEs.html",
    "title": "Apéndice B — Entornos de desarrollo para Quarto",
    "section": "",
    "text": "B.1 R Studio",
    "crumbs": [
      "Apéndices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Entornos de desarrollo para Quarto</span>"
    ]
  },
  {
    "objectID": "B-IDEs.html#visual-studio",
    "href": "B-IDEs.html#visual-studio",
    "title": "Apéndice B — Entornos de desarrollo para Quarto",
    "section": "B.2 Visual Studio",
    "text": "B.2 Visual Studio",
    "crumbs": [
      "Apéndices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Entornos de desarrollo para Quarto</span>"
    ]
  },
  {
    "objectID": "C-packages.html",
    "href": "C-packages.html",
    "title": "Apéndice C — Paquetes R y atribuciones",
    "section": "",
    "text": "C.1 Requisitos previos",
    "crumbs": [
      "Apéndices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Paquetes R y atribuciones</span>"
    ]
  },
  {
    "objectID": "C-packages.html#rticles",
    "href": "C-packages.html#rticles",
    "title": "Apéndice C — Paquetes R y atribuciones",
    "section": "C.2 rticles",
    "text": "C.2 rticles\nShiny\nIOSlides, otras…\nOtros",
    "crumbs": [
      "Apéndices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Paquetes R y atribuciones</span>"
    ]
  },
  {
    "objectID": "C-packages.html#atribución-de-imágenes-e-iconos",
    "href": "C-packages.html#atribución-de-imágenes-e-iconos",
    "title": "Apéndice C — Paquetes R y atribuciones",
    "section": "C.3 Atribución de imágenes e iconos",
    "text": "C.3 Atribución de imágenes e iconos\n\nR logo by The R Foundation.\nPython file icons created by Flat Icons - Flaticon.\nHtml icons created by Freepik - Flaticon.\nMicrosoft word icons created by Pixel perfect - Flaticon.\nPdf icons created by Dimitry Miroliubov - Flaticon.",
    "crumbs": [
      "Apéndices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Paquetes R y atribuciones</span>"
    ]
  },
  {
    "objectID": "D-pdf-latex.html",
    "href": "D-pdf-latex.html",
    "title": "Apéndice D — Documentos PDF con LaTeX",
    "section": "",
    "text": "D.1 Salida en formato PDF",
    "crumbs": [
      "Apéndices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Documentos PDF con LaTeX</span>"
    ]
  },
  {
    "objectID": "D-pdf-latex.html#acerca-de-latex",
    "href": "D-pdf-latex.html#acerca-de-latex",
    "title": "Apéndice D — Documentos PDF con LaTeX",
    "section": "D.2 Acerca de LaTeX",
    "text": "D.2 Acerca de LaTeX",
    "crumbs": [
      "Apéndices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Documentos PDF con LaTeX</span>"
    ]
  },
  {
    "objectID": "D-pdf-latex.html#ejemplos-prácticos",
    "href": "D-pdf-latex.html#ejemplos-prácticos",
    "title": "Apéndice D — Documentos PDF con LaTeX",
    "section": "D.3 Ejemplos prácticos",
    "text": "D.3 Ejemplos prácticos",
    "crumbs": [
      "Apéndices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Documentos PDF con LaTeX</span>"
    ]
  }
]