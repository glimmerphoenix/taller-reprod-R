[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Investigación reproducible con Quarto y R",
    "section": "",
    "text": "Preface\nEste taller explica cómo utilizar Quarto, un software de creación de documentación científica, para crear publicaciones de calidad que integren contenido de texto formateado, gráficos, tablas, así como resultados de ejecución de código software en varios lenguajes, todo ello integrado en el propio documento.\nQuarto se ha convertido en una herramienta muy versátil y potente en el conjunto de herramientas de los programadores científicos, en especial por proporcionar soporte para implementar buenas prácticas de investigación reproducible, incluyendo los principios FAIR. El intenso movimiento iniciado desde hace años por la comunidad científica para garantizar acceso en abierto no solo al producto final (e.g. una publicación) sino también a materiales adicionales (códig fuente, conjuntos de datos, figuras, procesos de trabajo, archivos de configuración, etc.) se ha convertido en un objetivo insoslayable para académicos y especialistas en muchos campos diferentes. Muchas publicaciones científicas de prestigio exigen ahora a los autores enviar estos materiales auxiliares junto con los borradores de sus manuscritos, para permitir que otros colegas reproduzcan y validen los resultados, repliquen sus estudios sobre nuevas cohortes de individuos o elementos o para contribuir a la interpretación de los resultados obtenidos.\nCon la herramienta Quarto se puede combinar texto formateado (escrito en Markdown) junto con secciones de código ejecutable, todo integrado en un mismo documento. Estas secciones o chunks de código ejecutable pueden estar escritas en varios lenguajes: R, Python, Julia u Observable. Es incluso posible combinar en un mismo documento o colección de documentos secciones de código escritas en diferentes lenguajes de programación.\nEste es un taller práctico que presenta ejemplos reales y comandos para crear paso a paso tus propios documentos con Quarto en poco tiempo. Además, junto a la explicación de los conceptos clave para entender este proceso también se ofrecen recomendaciones sobre buenas prácticas de trabajo, para guiar a los aprendices de Quarto en la dirección correcta.\nPuedes aprender muchos más detalles sobre cuarto en la guía en línea https://quarto.org/docs/guide/. En particular, en https://quarto.org/docs/books se documenta en detalle cómo crear libros como este utilizando Quarto.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "01-quarto.html",
    "href": "01-quarto.html",
    "title": "1  Documentos científicos",
    "section": "",
    "text": "1.1 Programación literaria\nEl concepto de programación literaria fue acuñado por el profesor Donald E. Knuth ya en 1984 Knuth (1984). Sí, no has leído mal, hace más de 40 años. Este concepto establece que debería ser posible integrar, en un solo documento científico, texto formateado y resultados de la ejecución de código software para componer dicho documento de forma dinámica. Entonces, ¿por qué hemos tardado tanto en poner en práctica esta idea? La visión de Knuth, aunque muy adelantada a su tiempo, era correcta, pero la tecnología de la época no permitía ponerla en práctica.\nSin embargo, hoy día contamos con todos los elementos indispensables para llevar esta idea a la práctica. Es más, contamos con una herramienta, Quarto, que nos va a permitir automatizar y gestionar todo el proceso de creación de documentos de programación literaria de forma rápida y fiable.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Documentos científicos</span>"
    ]
  },
  {
    "objectID": "01-quarto.html#investigación-reproducible",
    "href": "01-quarto.html#investigación-reproducible",
    "title": "1  Documentos científicos",
    "section": "1.2 Investigación reproducible",
    "text": "1.2 Investigación reproducible",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Documentos científicos</span>"
    ]
  },
  {
    "objectID": "01-quarto.html#quarto-para-publicaciones-científicas",
    "href": "01-quarto.html#quarto-para-publicaciones-científicas",
    "title": "1  Documentos científicos",
    "section": "1.3 Quarto para publicaciones científicas",
    "text": "1.3 Quarto para publicaciones científicas\nAhora que ya conocemos el concepto fundamental sobre el que se asienta el funcionamiento de Quarto y su aplicación para conseguir un mayor nivel de reproducibilidad y transparencia en nuestro proceso científico, vamos a explicar con más detalle el proceso que sigue Quarto para componer un documento. La figura X.X presenta un esquema con el proceso de creación del documento y los elementos y herramientas que entran en juego para conseguirlo.\n\n\nQuarto engine\nMarkdown (contenido formateado):\nProgramming engine: R, Python, Julia (lenguajes de programación que se pueden ejecutar en un entorno REPL).\nPandoc (traductor universal de formatos documentales):\n\nPrimero se crea una salida en formato Markdown.\nDespués, usamos Pandoc para convertir el contenido Markdown en el tipo de salida seleccionado.\nOpciones disponibles: HTML, PDF, Word.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Documentos científicos</span>"
    ]
  },
  {
    "objectID": "01-quarto.html#sec-quarto-install",
    "href": "01-quarto.html#sec-quarto-install",
    "title": "1  Documentos científicos",
    "section": "1.4 Instalación de Quarto",
    "text": "1.4 Instalación de Quarto\nhttps://quarto.org/docs/get-started/\nÚltima versión disponible: 1.5.57.\n\n\n\n\nKnuth, D. E. (1984). Literate Programming. Comput. J., 27(2), 97-111. https://doi.org/10.1093/comjnl/27.2.97",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Documentos científicos</span>"
    ]
  },
  {
    "objectID": "02-doctypes.html",
    "href": "02-doctypes.html",
    "title": "2  Tipos de documentos",
    "section": "",
    "text": "2.1 Documentos individuales\nLa forma más sencilla de trabajar con Quarto es crear un documento individual. Dicho documento podrá utilizar las secciones o chunks de código para leer datos de entrada o descargarlos de alguna fuente, procesarlos, analizarlos y mostrar los resultados. Se pueden añadir gráficos, tablas, ecuaciones, referencias bibliográficas y muchos otros elementos.\nLos documentos tienen siempre una estructura estándar:",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Tipos de documentos</span>"
    ]
  },
  {
    "objectID": "02-doctypes.html#documentos-individuales",
    "href": "02-doctypes.html#documentos-individuales",
    "title": "2  Tipos de documentos",
    "section": "",
    "text": "Preámbulo: en el que se especifican opciones de configuración para la creación del documento con Quarto y sus herramientas asociadas.\nCuerpo: la sección que alberga el contenido principal del documento, incluyendo secciones de texto formateado en Markdown y secciones de código ejecutable. El código software se podrá mostrar, si resulta de utilidad, o quedar oculto en el resultado final.\nReferencias: Al final del documento se incluyen las referencias bibliográficas, como es habitual en los textos científicos.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Tipos de documentos</span>"
    ]
  },
  {
    "objectID": "02-doctypes.html#libros",
    "href": "02-doctypes.html#libros",
    "title": "2  Tipos de documentos",
    "section": "2.2 Libros",
    "text": "2.2 Libros\nLa evolución natural del caso anterior es reunir una colección de documentos individuales en un solo libro. Quarto books permite crear este tipo de documentos, estructurados en partes, capítulos y secciones. Las opciones de configuración permitirán confeccionar una portada de introducción para el sito web que contiene los capítulos (un documento por capítulo) o bien los elementos necesarios para crear un libro en PDF, semejante a los publicados por una editorial.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Tipos de documentos</span>"
    ]
  },
  {
    "objectID": "02-doctypes.html#artículos-y-publicaciones",
    "href": "02-doctypes.html#artículos-y-publicaciones",
    "title": "2  Tipos de documentos",
    "section": "2.3 Artículos y publicaciones",
    "text": "2.3 Artículos y publicaciones\nUno de los resultados clave en todo proceso científico es la producción de artículos y publicaciones (informes técnicos, etc.) que recojan los resultados y avances científicos conseguidos. En este caso, Quarto también nos podrá ayudar, con la colaboración de otros elementos indispensables como el paquete R rticles, que proporciona plantillas para generar artículos según las especificaciones de las principales publicaciones y editoriales científicas en multitud de campos de conocimiento.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Tipos de documentos</span>"
    ]
  },
  {
    "objectID": "02-doctypes.html#presentaciones",
    "href": "02-doctypes.html#presentaciones",
    "title": "2  Tipos de documentos",
    "section": "2.4 Presentaciones",
    "text": "2.4 Presentaciones\nTambién es posible generar presentaciones (normalmente, en formato HTML) con diapositivas mediante Quarto. En este caso, tendríamos el soporte de varios paquetes y entornos de creación de presentaciones web a nuestra disposición, como reveal.js (HTML), Beamer (para LaTeX/PDF) o formato PPTX de MS Office.\nEste caso no lo trataremos en este taller, pero se puede obtener más información en la guía online, disponible en https://quarto.org/docs/presentations/.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Tipos de documentos</span>"
    ]
  },
  {
    "objectID": "02-doctypes.html#sitios-web",
    "href": "02-doctypes.html#sitios-web",
    "title": "2  Tipos de documentos",
    "section": "2.5 Sitios web",
    "text": "2.5 Sitios web\nOtra opción que puede resultar interesante es crear sitios web personales (por ejemplo, para mostrar nuestro CV y una selección de trabajos destacados, publicaciones, etc.), blogs e incluso sitios web corporativos (organización, grupo de investigación) de forma rápida mediante Quarto. Existen numerosas plantillas gratuitas y de pago ya disponibles para crear sitios web con un aspecto armonizado, aunque necesitaremos aprender un poco de HTML y CSS para poder personalizar aún más nuestra web.\nAquí tenemos un ejemplo de sitio web de un investigador en tecnología medioambiental creado con Quarto: https://www.mm218.dev/. Más ejemplos de diferentes tipos de sitios web generados con Quarto: https://drganghe.github.io/quarto-academic-site-examples.html.\nSe puede conseguir más información y tutoriales para crear sitios web con Quarto en https://quarto.org/docs/websites/.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Tipos de documentos</span>"
    ]
  },
  {
    "objectID": "02-doctypes.html#dashboards",
    "href": "02-doctypes.html#dashboards",
    "title": "2  Tipos de documentos",
    "section": "2.6 Dashboards",
    "text": "2.6 Dashboards\nPor último, es posible crear cuadros de mandos o dashboards personalizados para monitorización de datos, análisis de modelos y resultados o bien para ejemplos y aplicaciones docentes utilizando Quarto, tal y como se describen en la guía https://quarto.org/docs/dashboards/.\nEn este caso podemos incluir entre las herramientas Shiny, un paquete software para R (también disponible para Python) con el que crear aplicaciones interactivas basadas en datos de forma rápida y sencilla.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Tipos de documentos</span>"
    ]
  },
  {
    "objectID": "03-workflow.html",
    "href": "03-workflow.html",
    "title": "3  Proceso de trabajo",
    "section": "",
    "text": "3.1 Conjunto de herramientas\nSe necesitan programas para cargar los documentos de salida, según el formato: navegador web (HTML), MS Word (archivos DOC), visor PDF (archivos PDF).",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Proceso de trabajo</span>"
    ]
  },
  {
    "objectID": "03-workflow.html#conjunto-de-herramientas",
    "href": "03-workflow.html#conjunto-de-herramientas",
    "title": "3  Proceso de trabajo",
    "section": "",
    "text": "Quarto\nKnitr\nMarkdown\nPandoc",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Proceso de trabajo</span>"
    ]
  },
  {
    "objectID": "03-workflow.html#producir-html",
    "href": "03-workflow.html#producir-html",
    "title": "3  Proceso de trabajo",
    "section": "3.2 Producir HTML",
    "text": "3.2 Producir HTML",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Proceso de trabajo</span>"
    ]
  },
  {
    "objectID": "03-workflow.html#producir-pdf",
    "href": "03-workflow.html#producir-pdf",
    "title": "3  Proceso de trabajo",
    "section": "3.3 Producir PDF",
    "text": "3.3 Producir PDF\n\n3.3.1 Personalizar documentos PDF\nSe pueden utilizar plantillas de documentos LaTeX predefinidas. Por defecto, Quarto utiliza varias plantillas de la colección de paquetes LaTeX koma-script.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Proceso de trabajo</span>"
    ]
  },
  {
    "objectID": "04-singledoc.html",
    "href": "04-singledoc.html",
    "title": "4  Documentos individuales",
    "section": "",
    "text": "4.1 Creación del documento con RStudio\nAntes de empezar, comprueba que has instalado el software Quarto en tu máquina. Es un programa software independiente, que tiene que estar instalado para que el resto del proceso funcione (consulta la sección Sección 1.4).\nSi ya tenemos instalada una versión reciente de RStudio, necesitaremos instalar los siguientes paquetes para el ejemplo:\ninstall.packages(\"tidyverse\")\ninstall.packages(\"palmerpenguins\")\ninstall.packages(\"quarto\")\nAhora, en RStudio creamos un nuevo proyecto eligiendo la opción Quarto project, tal y como aparece en la Figura 4.1.\nPodemos nombrar el directorio de nuestro proyecto como primer-ejemplo y pulsamos Create Project.\nComo resultado, nos debe aparecer un nuevo proyecto abierto en pantalla, con el aspecto que se muestra en la Figura 4.2.\nEn concreto, en el panel superior izquierdo podemos comprobar que, por defecto se ha abierto el editor Visual, que permite crear documentos Quarto de forma más intuitiva. Sin embargo, para empezar a familiarizarnos desde el principio con la estructura de un documento en quarto vamos a cambiar al editor Source para ver el código fuente, pulsando en el botón que se muestra en la figura Figura 4.3.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Documentos individuales</span>"
    ]
  },
  {
    "objectID": "04-singledoc.html#creación-del-documento-con-rstudio",
    "href": "04-singledoc.html#creación-del-documento-con-rstudio",
    "title": "4  Documentos individuales",
    "section": "",
    "text": "Figura 4.1: New Quarto project\n\n\n\n\n\n\n\n\n\n\n\nFigura 4.2: First example\n\n\n\n\n\n\n\n\n\n\nFigura 4.3: Source editor",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Documentos individuales</span>"
    ]
  },
  {
    "objectID": "04-singledoc.html#estructura-del-documento",
    "href": "04-singledoc.html#estructura-del-documento",
    "title": "4  Documentos individuales",
    "section": "4.2 Estructura del documento",
    "text": "4.2 Estructura del documento\nLa estructura de un documento individual en Quarto es esta.\n---\ntitle: \"Mi primer documento\"\nauthor: John Doe\ndate: 2024-10-24\n---\n\nAquí tenemos algo de contenido en formato **Markdown**.\n\n```{r}\n#| label: Etiqueta\n\n1 + 1\n```\n\nContenido *adicional* en Markdown.\nEl contenido del archivo consta de dos partes:\n\nPreámbulo: está delimitado por dos marcas ---. Dentro de esta área podemos asignar valores a opciones de configuración para maquetar y crear el documento, tales como el título, autor/es, fecha, etc. También podemos configurar diversas opciones relacionadas con el formato de salida de los documentos.\nCuerpo del documento: se compone de párrafos de texto formateados utilizando la sintaxis de marcado Markdown, que veremos después. Además, también se pueden intercalar en el texto fragmentos de código ejecutable o chunks, que se marcan siguiendo una sintaxis especial (como vemos en el ejemplo anterior).\n\nCada chunk de código ejecutable está delimitado de la siguiente manera\n```{r}\n# Código en R\n```\n\n\n\n\n\n\nSoporte para otros lenguajes de programación\n\n\n\nAunque en este taller nos centramos en el lenguaje R, debemos sabes que Quarto también soporta otros lenguajes de programación como Python, Julia u Observable.\nPodemos cambiar el lenguaje de programación de cada chunk indicando su nombre al comienzo, como por ejemplo:\n```{pyton}\n# Código en Python\n```\nSin embargo, para que pueda funcionar necesitaremos realizar algunas tareas adicionales de configuración.\n\n\n\n4.2.1 El preámbulo\n\n\n4.2.2 Listado de opciones\nExiste un extenso listado de opciones de configuración que podemos incluir en nuestros documentos.\n\nOpciones para salida HTML: permiten configurar diversos aspectos básicos del documento, tales como el título y subtítulo, fecha, autor (o lista de autores), resumen o DOI; opciones de formato como el tema o estilos avanzados para contenido HTML con CSS; numeración y tabla de contenidos, etc.\n\nOpciones básicas para HTML con Quarto.\nLista completa de opciones HTML con Quarto.\n\nOpciones para salida PDF: ofrecen la posibilidad de configurar múltiples parámetros para la creación del documento en este formato, muchas de ellas similares a las de la salida en HTML. Una opción particularmente relevante es elegir el formato de documento LaTeX (opción documentclass), que define el aspecto general de la maquetación que se va a emplear. Por defecto, se emplean clases del metapaquete KOMA Script, como scrartcl o scrbook. También es importante indicar la opción papersize, en nuestro caso para garantizar que se usa un formato estándar como el A4. El formato de las citas también es relevante, pudiendo elegir, por ejemplo, el motor BibLaTeX que es más potente, con soporte multilenguaje y para codificación de caracteres UTF-8 nativa. Por último, también es importante indicar el motor de compilación. Al contrario que en HTML, cuando generamos documentos en PDF es imprescidible que tengamos instalada una distribución TeX/LaTeX previamente en nuestro sistema, para compilar y generar los documentos. Si no disponemos de ninguna todavía, se puede instalar TinyTeX, una distribución ligera de TeX Live que tiene mucho menor tamaño (~100 MB frente a los más de 4 GB de TeX Live completa). Si queremos una flexibilidad total en la maquetación del documento, se recomienda encarecidamente usar el motor XeLaTeX (opción pdf-engine: xelatex), que es el valor por defecto que utiliza Quarto.\n\nOpciones básicas para PDF con Quarto.\nLista completa de opciones disponibles en PDF con Quarto.\n\n\n\n\n4.2.3 Sintaxis Markdown básica\nEn el siguiente enlace puedes encontrar un rápido tutorial básico que muestra las opciones básicas de la sintaxis Markdown aceptada en documentos Quarto para formatear el contenido textual.\n\nGuía básica de sintaxis markdown.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Documentos individuales</span>"
    ]
  },
  {
    "objectID": "04-singledoc.html#creación-del-documento-output",
    "href": "04-singledoc.html#creación-del-documento-output",
    "title": "4  Documentos individuales",
    "section": "4.3 Creación del documento (output)",
    "text": "4.3 Creación del documento (output)\nPor defecto, si no indicamos nada Quarto generará un solo formato de salida del documento en HTML. Sin embargo, es posible definir más de un formato de salida incluyendo más opciones de configuración. Por supuesto, se pueden indicar diferentes opciones para generar varios formatos de salida simultáneamente, o bien para elegir el formato de salida que queremos producir en función de nuestros intereses, seleccionando el formato que necesitamos al previsualizar o al generar el documento definitivo.\n\n4.3.1 Previsualización\nPara previsualizar el documento tenemos que pulsar el botón Render en el menú de herramientas de la interfaz de RStudio, tal y como se muestra en la Figura 4.4.\n\n\n\n\n\n\nFigura 4.4: Botón Render para previsualizar el documento generado.\n\n\n\nPor defecto, lo normal es que se abra nuestro navegador web principal o un panel en la interfaz de RStudio mostrando la página HTML con el documento ya generado. Pulsando sobre el icono con un engranaje junto al botón Render se puede seleccionar, entre otros aspectos, el tipo de previsualización que queremos que se lance tras completar la creación del documento o desactivar por completo dicha previsualización. La opciones disponibles se muestran en la Figura 4.5\n\n\n\n\n\n\nFigura 4.5: Opciones de previsualización de la operación Render.\n\n\n\n\n\n4.3.2 Seleccionar el tipo de documento\nCuando tenemos varias opciones de formato de salida configuradas en nuestro documento, podemos elegir en tiempo de previsualización cuál de los formatos se elige para generar el documento. En la Figura 4.6 se puede observar un ejemplo de documento que incluye configuración para dos formatos de salida (HTML y PDF) y el cambio en el botón Render, en el que ahora aparece una pequeña flecha negra justo a la derecha del icono del botón para desplegar las dos opciones de salida disponibles.\n\n\n\n\n\n\nFigura 4.6: Selección de formatos de salida con la operación Render.\n\n\n\n\n\n4.3.3 Opciones básicas de configuración\nA continuación, se presenta un ejemplo de algunas opciones básicas de configuración que suelen ser habituales en documentos con formato de salida HTML.\n---\ntitle: \"Mi primer documento\"\nauthor: \n  - \"John Doe\"\n  - \"Mary Jane\"\ndate: 2024-10-24\n\nlang: es\nbibliography: references.bib\n\nformat:\n  html:\n    theme: cosmo\n    toc: true\n    number-sections: true\n    html-math-method: katex\n    css: styles.css\n  pdf:\n    documentclass: scrreprt\n---\n\nRESTO DEL DOCUMENTO\nEn este ejemplo se indica, además del autor y la fecha, una lista de dos autores, el lenguaje principal del documento (español), el archivo de referencias de bibliografía (en formato .bib) y ya dentro de las opciones HTML, el tema de maquetación, la inclusión de una tabla de contenidos (por defecto situada en la parte superior derecha), numeración de secciones, selección del motor para renderizar ecuaciones en el documento y un archivo de estilos personalizados en formato CSS para ajustar algunas opciones finas de maquetación.\nUna opción que conviene destacar es la de forzar a que todos los recursos (imágenes, información de estilos, etc.) estén integrados en el propio archivo HTML, para facilitar la compartición o publicación directa del documento sin necesidad de aportar también los archivos auxiliares necesarios para mostrarlo en el navegador. Esta opción se muestra a continuación:\nformat:\n  html:\n    embed-resources: true",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Documentos individuales</span>"
    ]
  },
  {
    "objectID": "04-singledoc.html#chunks-de-código-ejecutable",
    "href": "04-singledoc.html#chunks-de-código-ejecutable",
    "title": "4  Documentos individuales",
    "section": "4.4 Chunks de código ejecutable",
    "text": "4.4 Chunks de código ejecutable\nLa característica más diferencial de los documentos creados con Quarto es la posibilidad de intercalar fragmentos de código ejecutable, llamadas chunks en el propio documento. Esto incluye también la opción de que dicho código genere diferentes resultados (numéricos, gráficos, tablas, animaciones, etc.) que se integren directamente en el documento. De este modo, si mantenemos actualizado el código siempre se generarán las versiones correcgtas de dichos resultados.\nLos fragmentos de código ejecutable tienen la siguiente estructura:\n```{r}\n#| label: id-fragmento\n\n# Aquí va el código ejecutable\na = c(1, 2, 3, 4)\nb = a^2\n```\nLa tripleta de caracteres ``` se denomina fence y delimita el comienzo y el final del fragmento de código. Justo a continuación del delimitador de apertura se escribe entre llaves el identificador del lenguaje de programación en el que está escrito el código de ese fragmento. Esa información se usa para elegir el resaltado de sintaxis apropiado para mostrar el código de ese lenguaje y para seleccionar el intérprete que ejecuta el código y produce los resultados.\nEn las siguientes líneas podemos incluir una o varias opciones de configuración específicas para ese fragmento de código, mediante la sintaxis #| opcion: valor. Por ejemplo, en el fragmento anterior la opción #| label: id-fragmento crea una etiqueta (que debe ser unívoca) para identificar a ese fragmento de código dentro del documento.\n\nLista de opciones para fragmentos de código.\n\nAlgunas opciones de uso frecuente son:\n\neval: true | false | [...]: Indica si se debe evaluar (ejecutar) el contenido de ese fragmento. Se puede pasar una lista de números de línea positivos o negativos para seleccionar explícitamente qué líneas de código se incluyen (positivos) o excluyen (negativos) de la ejecución.\necho: true | false | fenced | [...]: Indica si se debe incluir el código fuente del fragmento en el documento o no. La opción fenced incluye también el delimitador de celda como parte de la salida. Por último, también acepta una lista de números de línea positivos o negativos para seleccionar qué líneas de código se mostrarán o no en el fragmento.\noutput: true | false | asis: Para decidir si el resultado de la ejecución del código se incluye o no en el documento. El valor asisfuerza a que el resultado se trate como contenido Markdown en crudo.\nwarning: true | false: Indica si se deben incluir los mensajes de aviso en la salida.\nerror: true | false: Marca si los mensajes de error generados se incluyen en la salida.\nmessage: true | false: Indica si los mensajes de información generados se incluyen en la salida.\n\nCuando los fragmentos generan figuras, estas se insertan dentro del propio documento. Veamos un ejemplo:\n\n```{r}\n#| label: fig-example-cars\n#| fig-cap: \"Gráfico de correlación lineal positiva entre el kilometraje en ciudad y en carretera de diferentes modelos de coches.\"\n\nlibrary(ggplot2)\n#| label: scatterplot\n#| echo: true\n\nggplot(mpg, aes(x = hwy, y = cty, color = cyl)) +\n  geom_point(alpha = 0.5, size = 2) +\n  scale_color_viridis_c() +\n  theme_minimal()\n```\n\n\n\n\n\n\n\nFigura 4.7: Gráfico de correlación lineal positiva entre el kilometraje en ciudad y en carretera de diferentes modelos de coches.\n\n\n\n\n\n\n\n\n\n\n\nNumeración automática de figuras\n\n\n\nEs importante que el identificador de fragmento que elegimos para código que genera una o varias figuras comience por el prefijo fig-. De ese modo, nos aseguramos de que Quarto le asigne automáticamente una numeración a la figura generada y que podamos crear referencias cruzadas (enlaces internos) a dicha figura en nuestro documento.\nComo veremos más adelante, otros tipos de salida como las tablas también necesitan que se les asigne un patrón concreto en su identificador de fragmento para que se numeren de forma automática y se puedan referenciar dentro del documento.\n\n\nLa gestión de figuras en Quarto es bastante sofisticada, hasta el punto de que se pueden organizar de forma sencilla varias subfiguras con sus respectivas descripciones individuales, como se muestra en el siguiente ejemplo usando algunas opciones adiconales.\n```{r}\n#| label: fig-mpg-subplot\n#| fig-cap: \"Kilometraje en ciudad y en carretera de 38 modelos populares de coches.\"\n#|\n#| fig-subcap:\n#|   - \"Color por núm. de cilindros.\"\n#|   - \"Color por cubicaje del motor, en litros.\"\n#| layout-ncol: 1\n\nggplot(mpg, aes(x = hwy, y = cty, color = cyl)) +\n  geom_point(alpha = 0.5, size = 2) +\n  scale_color_viridis_c() +\n  theme_minimal()\n\nggplot(mpg, aes(x = hwy, y = cty, color = displ)) +\n  geom_point(alpha = 0.5, size = 2) +\n  scale_color_viridis_c(option = \"E\") +\n  theme_minimal()\n```\n\n\n\n\n\n\n\n\n\n\n\n(a) Color por núm. de cilindros.\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Color por cubicaje del motor, en litros.\n\n\n\n\n\n\n\nFigura 4.8: Kilometraje en ciudad y en carretera de 38 modelos populares de coches.\n\n\n\nAlgunas opciones frecuentes para chunks que generan figuras son:\n\nfig-width: Ancho de la figura.\nfig-height: Alto de la figura.\nfig-cap: String entre comillas que se insertará como descripción al pie de la figura (caption).\nfig-alt: Mensaje de texto alternativo que rellena el atributo alt de la imagen HTML (por ejemplo, para mejorar la accesibilidad del contenido).\nfig-dpi: Ajuste de la resolución de la figura (en puntos por pulgada).\n\nEl tutorial sobre fragmentos de código ejecutables de la documentación oficial presenta más información y ejemplos sobre cómo utilizar esta potente característica de Quarto.l",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Documentos individuales</span>"
    ]
  },
  {
    "objectID": "04-singledoc.html#herramientas-para-el-autor",
    "href": "04-singledoc.html#herramientas-para-el-autor",
    "title": "4  Documentos individuales",
    "section": "4.5 Herramientas para el autor",
    "text": "4.5 Herramientas para el autor\nAdemás de la capacidad de integrar código ejecutable y sus resultados en nuestros documentos científicos, Quarto incluye un buen número de recursos y herramientas para ofrecer una experiencia de autoría completa y eficiente.\n\n4.5.1 Secciones del documento\nComo ya vimos en el ejemplo de la Sección 4.3.3, existen dos opciones de configuración del documento HTML que nos permiten numerar las secciones e incorporar una tabla de contenidos generada automáticamente en la parte superior derecha de nuestro documento.\nformat:\n  html:\n    toc: true\n    number-sections: true\nUn funcionalidad importante para la creación de documentación científica es poder incluir referencias cruzadas, es decir, enlaces que nos lleven a otras secciones del documento. En Quarto esto se consigue siguiendo un sencillo procedimiento en dos pasos:\n\nAñadimos una etiqueta única para identificar la sección con la sintaxis:\n\n## Título de sección {#sec-etiqueta}\n\nReferenciamos en otro lugar del texto la etiqueta que hemos creado para esa sección, de forma que Quarto crea automáticamente el enlace (referencia cruzada) a dicha sección:\n\nEn el texto añadimos una referencia a la @sec-etiqueta\nSe puede ver un ejemplo de este tipo de referencias cruzadas creadas de forma automática al comienzo de esta misma sección. Por el contrario, si queremos que una sección del documento se excluya del esquema de numeración del resto de secciones, usamos en el título de esa sección la etiqueta especial:\n## Sección no numerada {.unnumbered}\nExisten varias opciones adicionales que controlan la forma y estilo con que se crean y numeran las secciones. Algunas de ellas son:\n\nanchor-sections: Hace que se muestre un enlace de anclado (para enlazar directamente esa sección en otro documento) cuando se pasa el ratón por encima del título de una sección.\ntoc-depth: Especifica cuántos niveles de profundidad en la numeración de secciones aparecen en la tabla de contenidos. Por defecto se muestran 3 niveles.\ntoc-location: body | left | right | left-body | right-body: Controla la ubicación en la que aparece la tabla de contenidos en el documento.\ntoc-title: Cadena de caracteres con el título de la tabla de contenidos.\ntoc-expand: Indica si se deben expandir todas las secciones de la tabla de contenidos o deben quedar colapsadas para que el usuario vaya pulsando en las que quiera expandir.\nnumber-depth: Determina la profundidad máxima a la que se numeran las secciones del documento (cuidado, debería estar en consonancia con el valor asignado a la opción toc-depth).\nnumber-offset: Permite ajustar el número por el que se empiezan a numerar las secciones. Si queremos que el documento comience a numerar la sección de más alto nivel como “4” entonces usamos number-offset: 3. Si queremos que el documento empiece en una sección de nivel 2 con numeración “1.5” debemos especificar number-offset: [1,4]. Definir un valor para esta opción implica que automáticamente number-sections: true.\n\n\n\n4.5.2 Ecuaciones\n\n\n4.5.3 Tablas\n\n\n4.5.4 Llamadas\n\n\n4.5.5 Citas bibliográficas\n\n\n4.5.6 Maquetación del documento\nhttps://quarto.org/docs/get-started/authoring/",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Documentos individuales</span>"
    ]
  },
  {
    "objectID": "05-books.html",
    "href": "05-books.html",
    "title": "5  Libros",
    "section": "",
    "text": "5.1 Herramientas de redacción",
    "crumbs": [
      "Libros con Quarto",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Libros</span>"
    ]
  },
  {
    "objectID": "05-books.html#herramientas-de-redacción",
    "href": "05-books.html#herramientas-de-redacción",
    "title": "5  Libros",
    "section": "",
    "text": "5.1.1 Figuras\n\n\n5.1.2 Tablas\n\n\n5.1.3 Ecuaciones\n\n\n5.1.4 Callouts",
    "crumbs": [
      "Libros con Quarto",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Libros</span>"
    ]
  },
  {
    "objectID": "05-books.html#gestión-de-referencias",
    "href": "05-books.html#gestión-de-referencias",
    "title": "5  Libros",
    "section": "5.2 Gestión de referencias",
    "text": "5.2 Gestión de referencias\n\n5.2.1 Referencias cruzadas en el documento\n\n\n5.2.2 Referencias bibliográficas",
    "crumbs": [
      "Libros con Quarto",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Libros</span>"
    ]
  },
  {
    "objectID": "05-books.html#plantillas-y-personalización",
    "href": "05-books.html#plantillas-y-personalización",
    "title": "5  Libros",
    "section": "5.3 Plantillas y personalización",
    "text": "5.3 Plantillas y personalización",
    "crumbs": [
      "Libros con Quarto",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Libros</span>"
    ]
  },
  {
    "objectID": "06-class-notes.html",
    "href": "06-class-notes.html",
    "title": "6  Taller: colección de apuntes",
    "section": "",
    "text": "6.1 Plantillas y herramientas",
    "crumbs": [
      "Libros con Quarto",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Taller: colección de apuntes</span>"
    ]
  },
  {
    "objectID": "06-class-notes.html#gestión-del-proyecto",
    "href": "06-class-notes.html#gestión-del-proyecto",
    "title": "6  Taller: colección de apuntes",
    "section": "6.2 Gestión del proyecto",
    "text": "6.2 Gestión del proyecto",
    "crumbs": [
      "Libros con Quarto",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Taller: colección de apuntes</span>"
    ]
  },
  {
    "objectID": "06-class-notes.html#publicación",
    "href": "06-class-notes.html#publicación",
    "title": "6  Taller: colección de apuntes",
    "section": "6.3 Publicación",
    "text": "6.3 Publicación",
    "crumbs": [
      "Libros con Quarto",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Taller: colección de apuntes</span>"
    ]
  },
  {
    "objectID": "07-manuscripts.html",
    "href": "07-manuscripts.html",
    "title": "7  Artículos y publicaciones científicas",
    "section": "",
    "text": "7.1 Replicabilidad en publicaciones científicas",
    "crumbs": [
      "Publicaciones",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Artículos y publicaciones científicas</span>"
    ]
  },
  {
    "objectID": "07-manuscripts.html#figuras-y-gráficos-para-publicación",
    "href": "07-manuscripts.html#figuras-y-gráficos-para-publicación",
    "title": "7  Artículos y publicaciones científicas",
    "section": "7.2 Figuras y gráficos para publicación",
    "text": "7.2 Figuras y gráficos para publicación",
    "crumbs": [
      "Publicaciones",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Artículos y publicaciones científicas</span>"
    ]
  },
  {
    "objectID": "07-manuscripts.html#el-paquete-rticles",
    "href": "07-manuscripts.html#el-paquete-rticles",
    "title": "7  Artículos y publicaciones científicas",
    "section": "7.3 EL paquete rticles",
    "text": "7.3 EL paquete rticles",
    "crumbs": [
      "Publicaciones",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Artículos y publicaciones científicas</span>"
    ]
  },
  {
    "objectID": "07-manuscripts.html#ejemplos-y-recomendaciones",
    "href": "07-manuscripts.html#ejemplos-y-recomendaciones",
    "title": "7  Artículos y publicaciones científicas",
    "section": "7.4 Ejemplos y recomendaciones",
    "text": "7.4 Ejemplos y recomendaciones",
    "crumbs": [
      "Publicaciones",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Artículos y publicaciones científicas</span>"
    ]
  },
  {
    "objectID": "08-FAIR.html",
    "href": "08-FAIR.html",
    "title": "8  Principios FAIR",
    "section": "",
    "text": "8.1 Visión general",
    "crumbs": [
      "Publicaciones",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Principios FAIR</span>"
    ]
  },
  {
    "objectID": "08-FAIR.html#publicación-del-código-fuente",
    "href": "08-FAIR.html#publicación-del-código-fuente",
    "title": "8  Principios FAIR",
    "section": "8.2 Publicación del código fuente",
    "text": "8.2 Publicación del código fuente",
    "crumbs": [
      "Publicaciones",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Principios FAIR</span>"
    ]
  },
  {
    "objectID": "08-FAIR.html#publicación-de-conjuntos-de-datos",
    "href": "08-FAIR.html#publicación-de-conjuntos-de-datos",
    "title": "8  Principios FAIR",
    "section": "8.3 Publicación de conjuntos de datos",
    "text": "8.3 Publicación de conjuntos de datos",
    "crumbs": [
      "Publicaciones",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Principios FAIR</span>"
    ]
  },
  {
    "objectID": "08-FAIR.html#gestión-de-referencias",
    "href": "08-FAIR.html#gestión-de-referencias",
    "title": "8  Principios FAIR",
    "section": "8.4 Gestión de referencias",
    "text": "8.4 Gestión de referencias\nDOI\nFigshare\nZenodo\narXiv\netc.",
    "crumbs": [
      "Publicaciones",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Principios FAIR</span>"
    ]
  },
  {
    "objectID": "09-add-resources.html",
    "href": "09-add-resources.html",
    "title": "9  Recursos adicionales",
    "section": "",
    "text": "Listado de recursos adicionales de interés.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, D. E. (1984). Literate Programming. Comput. J., 27(2), 97-111. https://doi.org/10.1093/comjnl/27.2.97",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Recursos adicionales</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "Referencias",
    "section": "",
    "text": "Knuth, D. E. (1984). Literate programming. Comput. J.,\n27(2), 97–111. https://doi.org/10.1093/comjnl/27.2.97",
    "crumbs": [
      "Referencias"
    ]
  },
  {
    "objectID": "A-command-ref.html",
    "href": "A-command-ref.html",
    "title": "Apéndice A — Comandos de utilidad",
    "section": "",
    "text": "A.1 Comandos Quarto",
    "crumbs": [
      "Apéndices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Comandos de utilidad</span>"
    ]
  },
  {
    "objectID": "A-command-ref.html#celdas-de-código-en-r",
    "href": "A-command-ref.html#celdas-de-código-en-r",
    "title": "Apéndice A — Comandos de utilidad",
    "section": "A.2 Celdas de código en R",
    "text": "A.2 Celdas de código en R",
    "crumbs": [
      "Apéndices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Comandos de utilidad</span>"
    ]
  },
  {
    "objectID": "B-IDEs.html",
    "href": "B-IDEs.html",
    "title": "Apéndice B — Entornos de desarrollo para Quarto",
    "section": "",
    "text": "B.1 R Studio",
    "crumbs": [
      "Apéndices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Entornos de desarrollo para Quarto</span>"
    ]
  },
  {
    "objectID": "B-IDEs.html#visual-studio",
    "href": "B-IDEs.html#visual-studio",
    "title": "Apéndice B — Entornos de desarrollo para Quarto",
    "section": "B.2 Visual Studio",
    "text": "B.2 Visual Studio",
    "crumbs": [
      "Apéndices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Entornos de desarrollo para Quarto</span>"
    ]
  },
  {
    "objectID": "C-packages.html",
    "href": "C-packages.html",
    "title": "Apéndice C — Paquetes R de interés",
    "section": "",
    "text": "C.1 rticles\nShiny\nIOSlides, otras…\nOtros",
    "crumbs": [
      "Apéndices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Paquetes R de interés</span>"
    ]
  },
  {
    "objectID": "D-pdf-latex.html",
    "href": "D-pdf-latex.html",
    "title": "Apéndice D — Documentos PDF con LaTeX",
    "section": "",
    "text": "D.1 Salida en formato PDF",
    "crumbs": [
      "Apéndices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Documentos PDF con LaTeX</span>"
    ]
  },
  {
    "objectID": "D-pdf-latex.html#acerca-de-latex",
    "href": "D-pdf-latex.html#acerca-de-latex",
    "title": "Apéndice D — Documentos PDF con LaTeX",
    "section": "D.2 Acerca de LaTeX",
    "text": "D.2 Acerca de LaTeX",
    "crumbs": [
      "Apéndices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Documentos PDF con LaTeX</span>"
    ]
  },
  {
    "objectID": "D-pdf-latex.html#ejemplos-prácticos",
    "href": "D-pdf-latex.html#ejemplos-prácticos",
    "title": "Apéndice D — Documentos PDF con LaTeX",
    "section": "D.3 Ejemplos prácticos",
    "text": "D.3 Ejemplos prácticos",
    "crumbs": [
      "Apéndices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Documentos PDF con LaTeX</span>"
    ]
  }
]